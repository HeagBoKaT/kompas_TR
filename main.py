import os
import sys
import json
import logging
from datetime import datetime
from PyQt6.QtWidgets import (
    QApplication,
    QHeaderView,
    QListWidgetItem,
    QMainWindow,
    QStyle,
    QTableWidget,
    QTableWidgetItem,
    QWidget,
    QVBoxLayout,
    QHBoxLayout,
    QSplitter,
    QGroupBox,
    QTreeWidget,
    QTreeWidgetItem,
    QLineEdit,
    QPushButton,
    QTextEdit,
    QTabWidget,
    QListWidget,
    QLabel,
    QStatusBar,
    QToolBar,
    QMenuBar,
    QMenu,
    QMessageBox,
    QInputDialog,
    QScrollBar,
    QDialog,
    QVBoxLayout,
    QHBoxLayout,
    QTreeWidget,
    QTreeWidgetItem,
    QLineEdit,
    QComboBox,
    QTextEdit,
    QLabel,
    QMessageBox,
)

from PyQt6.QtGui import QIcon, QFont, QTextCharFormat, QTextCursor, QAction
from PyQt6.QtCore import Qt, QTimer
import pythoncom
import win32com.client
from win32com.client import Dispatch, gencache
import re
import gc


class KompasApp(QMainWindow):
    def __init__(self):
        super().__init__()
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É –Ω–∞—Å—Ç—Ä–æ–µ–∫
        user_home = os.path.expanduser("~")
        app_folder = os.path.join(user_home, "KOMPAS-TR")
        if not os.path.exists(app_folder):
            os.makedirs(app_folder)
        self.settings_file = os.path.join(app_folder, "settings.json")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–º—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–≤–µ—Ç–ª–∞—è)
        self.dark_mode = self.load_theme_setting()

        self.status_bar = self.statusBar()
        self.status_bar.showMessage("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ")
        self.setWindowTitle("–†–µ–¥–∞–∫—Ç–æ—Ä —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π KOMPAS-3D")
        self.setGeometry(100, 100, 1400, 900)
        self.setMinimumSize(1000, 700)

        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–∫–æ–Ω–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        icon_path = os.path.join(
            os.path.dirname(os.path.abspath(__file__)), "icons", "icon.ico"
        )
        if os.path.exists(icon_path):
            self.setWindowIcon(QIcon(icon_path))

        self.templates = {}
        self.template_search_var = ""
        self.auto_numbering_var = False

        self.load_templates()
        ThemeManager.apply_theme(self, self.dark_mode)  # –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—É—é —Ç–µ–º—É
        self.create_ui()

        self.module7 = None
        self.api7 = None
        self.const7 = None
        self.app7 = None
        self.connect_to_kompas()

        self.update_active_document_info()
        self.update_documents_tree()

        self.timer = QTimer()
        self.timer.timeout.connect(self.periodic_update)
        self.timer.start(1000)

    def apply_theme(self):
        ThemeManager.apply_theme(self, self.dark_mode)

    def load_theme_setting(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–º—ã –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if not os.path.exists(self.settings_file):
                # –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º —Å —Ç–µ–º–æ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (—Å–≤–µ—Ç–ª–∞—è)
                default_settings = {"dark_mode": False}
                with open(self.settings_file, "w", encoding="utf-8") as f:
                    json.dump(default_settings, f, ensure_ascii=False, indent=4)
                return False

            with open(self.settings_file, "r", encoding="utf-8") as f:
                settings = json.load(f)
                return settings.get("dark_mode", False)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–≤–µ—Ç–ª–∞—è
        except Exception as e:
            self.status_bar.showMessage(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–µ–º—ã: {str(e)}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–≤–µ—Ç–ª—É—é —Ç–µ–º—É
            return False

    def save_theme_setting(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–º—ã –≤ —Ñ–∞–π–ª"""
        try:
            settings = {"dark_mode": self.dark_mode}
            with open(self.settings_file, "w", encoding="utf-8") as f:
                json.dump(settings, f, ensure_ascii=False, indent=4)
            self.status_bar.showMessage("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–º—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        except Exception as e:
            self.status_bar.showMessage(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–µ–º—ã: {str(e)}")

    def create_ui(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é
        self.create_menu()

        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        self.create_toolbar()

        # –°–æ–∑–¥–∞–Ω–∏–µ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–≥–æ –≤–∏–¥–∂–µ—Ç–∞
        self.create_central_widget()

        # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
        self.create_status_bar()

    def create_menu(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        menu_bar = self.menuBar()

        # –ú–µ–Ω—é "–§–∞–π–ª"
        file_menu = menu_bar.addMenu("–§–∞–π–ª")
        connect_action = QAction("–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ KOMPAS-3D", self)
        connect_action.setShortcut("Ctrl+K")
        connect_action.triggered.connect(self.connect_to_kompas)
        file_menu.addAction(connect_action)

        check_connect_action = QAction("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ", self)
        check_connect_action.triggered.connect(self.check_kompas_connection)
        file_menu.addAction(check_connect_action)

        file_menu.addSeparator()

        get_req_action = QAction("–ü–æ–ª—É—á–∏—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è", self)
        get_req_action.setShortcut("Ctrl+Q")
        get_req_action.triggered.connect(self.get_technical_requirements)
        file_menu.addAction(get_req_action)

        save_req_action = QAction("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è", self)
        save_req_action.setShortcut("Ctrl+S")
        save_req_action.triggered.connect(self.save_technical_requirements)
        file_menu.addAction(save_req_action)

        apply_req_action = QAction("–ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è", self)
        apply_req_action.setShortcut("Ctrl+E")
        apply_req_action.triggered.connect(lambda: self.apply_technical_requirements())
        file_menu.addAction(apply_req_action)

        # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ PDF
        save_pdf_action = QAction("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ PDF", self)
        save_pdf_action.setShortcut("Ctrl+Shift+S")
        save_pdf_action.triggered.connect(self.save_to_pdf)
        file_menu.addAction(save_pdf_action)

        file_menu.addSeparator()

        disconnect_action = QAction("–û—Ç–∫–ª—é—á–∏—Ç—å—Å—è –æ—Ç KOMPAS-3D", self)
        disconnect_action.triggered.connect(self.disconnect_from_kompas)
        file_menu.addAction(disconnect_action)

        file_menu.addSeparator()

        exit_action = QAction("–í—ã—Ö–æ–¥", self)
        exit_action.setShortcut("Alt+F4")
        exit_action.triggered.connect(self.close)
        file_menu.addAction(exit_action)

        # –ú–µ–Ω—é "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã" (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
        tools_menu = menu_bar.addMenu("–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã")
        edit_templates_action = QAction("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª —à–∞–±–ª–æ–Ω–æ–≤", self)
        edit_templates_action.triggered.connect(self.edit_templates_file)
        tools_menu.addAction(edit_templates_action)

        reload_templates_action = QAction("–û–±–Ω–æ–≤–∏—Ç—å —à–∞–±–ª–æ–Ω—ã", self)
        reload_templates_action.setShortcut("F5")
        reload_templates_action.triggered.connect(self.reload_templates)
        tools_menu.addAction(reload_templates_action)

        tools_menu.addSeparator()

        refresh_docs_action = QAction("–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤", self)
        refresh_docs_action.setShortcut("F6")
        refresh_docs_action.triggered.connect(self.update_documents_tree)
        tools_menu.addAction(refresh_docs_action)

        theme_action = QAction("–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ç–µ–º—É", self)
        theme_action.setShortcut("Ctrl+T")
        theme_action.triggered.connect(self.toggle_theme)
        tools_menu.addAction(theme_action)

        # –ú–µ–Ω—é "–ü–æ–º–æ—â—å" (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
        help_menu = menu_bar.addMenu("–ü–æ–º–æ—â—å")
        about_action = QAction("–û –ø—Ä–æ–≥—Ä–∞–º–º–µ", self)
        about_action.triggered.connect(self.show_about)
        help_menu.addAction(about_action)

        shortcuts_action = QAction("–ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏", self)
        shortcuts_action.triggered.connect(self.show_shortcuts)
        help_menu.addAction(shortcuts_action)

    def create_toolbar(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
        toolbar = self.addToolBar("Toolbar")
        toolbar.setMovable(False)

        # –ö–Ω–æ–ø–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        connect_btn = QAction("üîå", self)
        connect_btn.setToolTip("–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ KOMPAS-3D (Ctrl+K)")
        connect_btn.triggered.connect(self.connect_to_kompas)
        toolbar.addAction(connect_btn)

        # –ö–Ω–æ–ø–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
        disconnect_btn = QAction("üö´", self)
        disconnect_btn.setToolTip("–û—Ç–∫–ª—é—á–∏—Ç—å—Å—è –æ—Ç KOMPAS-3D")
        disconnect_btn.triggered.connect(self.disconnect_from_kompas)
        toolbar.addAction(disconnect_btn)

        # –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        check_connect_btn = QAction("üîç", self)
        check_connect_btn.setToolTip("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ KOMPAS-3D")
        check_connect_btn.triggered.connect(self.check_kompas_connection)
        toolbar.addAction(check_connect_btn)

        # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        refresh_btn = QAction("üîÑ", self)
        refresh_btn.setToolTip("–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (F6)")
        refresh_btn.triggered.connect(self.update_documents_tree)
        toolbar.addAction(refresh_btn)

        toolbar.addSeparator()

        # –ö–Ω–æ–ø–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ—Ö. —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
        get_btn = QAction("üì•", self)
        get_btn.setToolTip("–ü–æ–ª—É—á–∏—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è (Ctrl+Q)")
        get_btn.triggered.connect(self.get_technical_requirements)
        toolbar.addAction(get_btn)

        # –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ—Ö. —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
        save_btn = QAction("üíæ", self)
        save_btn.setToolTip("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è (Ctrl+S)")
        save_btn.triggered.connect(self.save_technical_requirements)
        toolbar.addAction(save_btn)

        # –ö–Ω–æ–ø–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ç–µ—Ö. —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
        apply_btn = QAction("üîÑ", self)
        apply_btn.setToolTip("–ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è (Ctrl+E)")
        apply_btn.triggered.connect(lambda: self.apply_technical_requirements())
        toolbar.addAction(apply_btn)

        # –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ PDF
        save_pdf_btn = QAction("üìÑ", self)
        save_pdf_btn.setToolTip("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ PDF (Ctrl+Shift+S)")
        save_pdf_btn.triggered.connect(self.save_to_pdf)
        toolbar.addAction(save_pdf_btn)

        toolbar.addSeparator()

        # –ö–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤
        edit_templates_btn = QAction("üìù", self)
        edit_templates_btn.setToolTip("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª —à–∞–±–ª–æ–Ω–æ–≤")
        edit_templates_btn.triggered.connect(self.edit_templates_file)
        toolbar.addAction(edit_templates_btn)

        # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤
        reload_templates_btn = QAction("üìã", self)
        reload_templates_btn.setToolTip("–û–±–Ω–æ–≤–∏—Ç—å —à–∞–±–ª–æ–Ω—ã (F5)")
        reload_templates_btn.triggered.connect(self.reload_templates)
        toolbar.addAction(reload_templates_btn)

    def create_central_widget(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–≥–æ –≤–∏–¥–∂–µ—Ç–∞"""
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        main_layout = QVBoxLayout(central_widget)

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ
        doc_frame = QGroupBox("–ê–∫—Ç–∏–≤–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç")
        doc_layout = QHBoxLayout(doc_frame)
        self.connect_status = QLabel("üî¥ –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
        self.connect_status.setStyleSheet("color: red;")
        doc_layout.addWidget(self.connect_status)
        self.active_doc_label = QLabel("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
        self.active_doc_label.setWordWrap(True)
        doc_layout.addWidget(self.active_doc_label)
        # –£–±–∏—Ä–∞–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤—ã—Å–æ—Ç—É –∏–ª–∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º
        doc_frame.setMinimumHeight(
            40
        )  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –≤—ã—Å–æ—Ç—É –≤–º–µ—Å—Ç–æ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π
        doc_frame.setMaximumHeight(
            70
        )  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –≤—ã—Å–æ—Ç—É –≤–º–µ—Å—Ç–æ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π
        main_layout.addWidget(doc_frame)

        # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –ø–∞–Ω–µ–ª–∏
        splitter = QSplitter(Qt.Orientation.Horizontal)
        main_layout.addWidget(splitter)

        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - –¥–µ—Ä–µ–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        left_panel = self.create_left_panel()
        splitter.addWidget(left_panel)

        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - —à–∞–±–ª–æ–Ω—ã –∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä
        right_panel = self.create_right_panel()
        splitter.addWidget(right_panel)

        splitter.setStretchFactor(0, 3)
        splitter.setStretchFactor(1, 4)

    def create_left_panel(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ª–µ–≤–æ–π –ø–∞–Ω–µ–ª–∏ —Å –¥–µ—Ä–µ–≤–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
        left_panel = QGroupBox("–û—Ç–∫—Ä—ã—Ç—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã")
        left_layout = QVBoxLayout(left_panel)

        # –ü–∞–Ω–µ–ª—å –ø–æ–∏—Å–∫–∞
        search_layout = QHBoxLayout()
        search_label = QLabel("üîç")
        self.doc_search_edit = QLineEdit()
        self.doc_search_edit.setPlaceholderText("–ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...")
        self.doc_search_edit.textChanged.connect(self.filter_documents_tree)
        search_layout.addWidget(search_label)
        search_layout.addWidget(self.doc_search_edit)

        refresh_btn = QPushButton("üîÑ")
        refresh_btn.setFixedWidth(30)
        refresh_btn.clicked.connect(self.update_documents_tree)
        refresh_btn.setToolTip("–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (F6)")
        search_layout.addWidget(refresh_btn)
        left_layout.addLayout(search_layout)

        # –î–µ—Ä–µ–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        self.doc_tree = QTreeWidget()
        self.doc_tree.setHeaderLabels(["–ò–º—è", "–¢–∏–ø", "–ü—É—Ç—å"])
        self.doc_tree.setColumnWidth(0, 150)
        self.doc_tree.setColumnWidth(1, 100)
        self.doc_tree.setColumnWidth(2, 300)
        self.doc_tree.itemDoubleClicked.connect(self.on_document_double_click)
        left_layout.addWidget(self.doc_tree)

        return left_panel

    def create_right_panel(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∞–≤–æ–π –ø–∞–Ω–µ–ª–∏ —Å —à–∞–±–ª–æ–Ω–∞–º–∏ –∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–º"""
        right_panel = QWidget()
        right_layout = QVBoxLayout(right_panel)

        # –ë–ª–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤
        templates_frame = QGroupBox("–®–∞–±–ª–æ–Ω—ã —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π")
        templates_layout = QVBoxLayout(templates_frame)

        # –ü–æ–∏—Å–∫ —à–∞–±–ª–æ–Ω–æ–≤
        search_layout = QHBoxLayout()
        search_label = QLabel("üîç")
        self.template_search_edit = QLineEdit()
        self.template_search_edit.setPlaceholderText("–ü–æ–∏—Å–∫ —à–∞–±–ª–æ–Ω–æ–≤...")
        self.template_search_edit.textChanged.connect(self.filter_templates)
        search_layout.addWidget(search_label)
        search_layout.addWidget(self.template_search_edit)
        templates_layout.addLayout(search_layout)

        # –í–∫–ª–∞–¥–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤
        self.template_tabs = QTabWidget()
        self.populate_template_tabs()
        templates_layout.addWidget(self.template_tabs)
        right_layout.addWidget(templates_frame)

        # –ë–ª–æ–∫ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
        editor_frame = QGroupBox("–¢–µ–∫—É—â–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è")
        editor_layout = QVBoxLayout(editor_frame)

        self.current_reqs_text = QTextEdit()
        self.current_reqs_text.setAcceptRichText(True)
        editor_layout.addWidget(self.current_reqs_text)

        right_layout.addWidget(editor_frame)

        return right_panel

    def create_status_bar(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Å—Ç–∞—Ç—É—Å–∞"""
        self.status_bar = QStatusBar()
        self.setStatusBar(self.status_bar)
        self.status_bar.showMessage("–ì–æ—Ç–æ–≤–æ")

        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è
        self.status_bar.setStyleSheet(
            """
            QStatusBar::item {
                border: none;
            }
            QLabel {
                padding: 4px 8px;
            }
        """
        )

        self.docs_count_label = QLabel("–î–æ–∫—É–º–µ–Ω—Ç–æ–≤: 0")
        self.status_bar.addPermanentWidget(self.docs_count_label)

        version_label = QLabel("v1.0.4 (2025)")
        self.status_bar.addPermanentWidget(version_label)

    def load_templates(self):
        try:
            user_home = os.path.expanduser("~")
            app_folder = os.path.join(user_home, "KOMPAS-TR")
            if not os.path.exists(app_folder):
                os.makedirs(app_folder)
            self.templates_file = os.path.join(app_folder, "templates.json")

            if not os.path.exists(self.templates_file):
                self.status_bar.showMessage("–§–∞–π–ª —à–∞–±–ª–æ–Ω–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π")
                with open(self.templates_file, "w", encoding="utf-8") as f:
                    json.dump({"–û–±—â–∏–µ": []}, f, ensure_ascii=False, indent=4)

            with open(self.templates_file, "r", encoding="utf-8") as f:
                self.templates = json.load(f)
            self.status_bar.showMessage(
                f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {sum(len(templates) for templates in self.templates.values())} —à–∞–±–ª–æ–Ω–æ–≤"
            )
        except Exception as e:
            self.status_bar.showMessage(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤: {str(e)}")
            QMessageBox.critical(
                self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —à–∞–±–ª–æ–Ω—ã: {str(e)}"
            )
            self.templates = {"–û–±—â–∏–µ": []}

    def connect_to_kompas(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ KOMPAS-3D"""
        try:
            if hasattr(self, "app7") and self.app7:
                try:
                    app_name = self.app7.ApplicationName(FullName=False)
                    self.connect_status.setText("üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ")
                    self.connect_status.setStyleSheet("color: green;")
                    self.status_bar.showMessage(f"–£–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ {app_name}")
                    return True
                except Exception:
                    self.app7 = None
                    self.status_bar.showMessage(
                        "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è, –ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è..."
                    )

            try:
                self.status_bar.showMessage(
                    "–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∑–∞–ø—É—â–µ–Ω–Ω–æ–º—É KOMPAS-3D..."
                )
                self.app7 = win32com.client.Dispatch("Kompas.Application.7")
                app_name = self.app7.ApplicationName(FullName=False)
                self.module7, self.api7, self.const7 = self.get_kompas_api7()
                self.connect_status.setText("üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ")
                self.connect_status.setStyleSheet("color: green;")
                self.status_bar.showMessage(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –∑–∞–ø—É—â–µ–Ω–Ω–æ–º—É {app_name}")
                self.update_documents_tree()
                return True
            except Exception:
                try:
                    self.status_bar.showMessage("–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ KOMPAS-3D...")
                    self.app7 = win32com.client.Dispatch("Kompas.Application.7")
                    self.app7.Visible = True
                    self.app7.HideMessage = True
                    self.module7, self.api7, self.const7 = self.get_kompas_api7()
                    app_name = self.app7.ApplicationName(FullName=False)
                    self.connect_status.setText("üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ")
                    self.connect_status.setStyleSheet("color: green;")
                    self.status_bar.showMessage(f"–ó–∞–ø—É—â–µ–Ω –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω {app_name}")
                    self.update_documents_tree()
                    return True
                except Exception as e:
                    self.connect_status.setText("üî¥ –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
                    self.connect_status.setStyleSheet("color: red;")
                    error_message = self.handle_kompas_error(e, "–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
                    self.status_bar.showMessage("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ KOMPAS-3D")
                    QMessageBox.critical(self, "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", error_message)
                    return False
        except Exception as e:
            self.connect_status.setText("üî¥ –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
            self.connect_status.setStyleSheet("color: red;")
            error_message = self.handle_kompas_error(e, "–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
            self.status_bar.showMessage("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ KOMPAS-3D")
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", error_message)
            return False

    def check_kompas_connection(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ KOMPAS-3D —Å –≤—ã–≤–æ–¥–æ–º —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if self.is_kompas_running():
            app_name = self.app7.ApplicationName(FullName=True)
            version = self.app7.ApplicationVersion()
            QMessageBox.information(
                self,
                "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏",
                f"–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ KOMPAS-3D\n\n–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: {app_name}\n–í–µ—Ä—Å–∏—è: {version}",
            )
            self.status_bar.showMessage(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ {app_name} –≤–µ—Ä—Å–∏–∏ {version}")
            return True
        else:
            reply = QMessageBox.question(
                self,
                "–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è",
                "–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ KOMPAS-3D.\n\n–•–æ—Ç–∏—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è?",
                QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No,
            )
            if reply == QMessageBox.StandardButton.Yes:
                return self.connect_to_kompas()
            return False

    def get_kompas_api7(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ API Kompas 3D –≤–µ—Ä—Å–∏–∏ 7"""
        module = gencache.EnsureModule(
            "{69AC2981-37C0-4379-84FD-5DD2F3C0A520}", 0, 1, 0
        )
        api = module.IKompasAPIObject(
            Dispatch("Kompas.Application.7")._oleobj_.QueryInterface(
                module.IKompasAPIObject.CLSID, pythoncom.IID_IDispatch
            )
        )
        const = gencache.EnsureModule(
            "{75C9F5D0-B5B8-4526-8681-9903C567D2ED}", 0, 1, 0
        ).constants
        return module, api, const

    def is_kompas_running(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ KOMPAS-3D"""
        try:
            return hasattr(self, "app7") and self.app7 is not None
        except:
            return False

    def filter_documents_tree(self, text):
        """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–µ—Ä–µ–≤–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É"""
        self.update_documents_tree(text)

    def filter_templates(self, text):
        """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —à–∞–±–ª–æ–Ω–æ–≤ –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É"""
        self.populate_template_tabs(text)

    def activate_selected_document(self):
        """–ê–∫—Ç–∏–≤–∞—Ü–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ –¥–µ—Ä–µ–≤–µ"""
        selected_items = self.doc_tree.selectedItems()
        if not selected_items:
            self.status_bar.showMessage("–ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
            return False

        try:
            if not hasattr(self, "app7") or not self.app7:
                self.connect_to_kompas()
                if not hasattr(self, "app7") or not self.app7:
                    return False

            doc_name = selected_items[0].text(0)
            documents = self.app7.Documents
            for i in range(documents.Count):
                doc = documents.Item(i)
                if doc.Name == doc_name:
                    doc.Active = True
                    self.update_active_document_info()
                    self.status_bar.showMessage(f"–î–æ–∫—É–º–µ–Ω—Ç {doc_name} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
                    return True
            self.status_bar.showMessage(
                f"–î–æ–∫—É–º–µ–Ω—Ç {doc_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"
            )
            return False
        except Exception as e:
            error_message = self.handle_kompas_error(e, "–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
            self.status_bar.showMessage("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", error_message)
            return False

    def show_document_info(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–µ"""
        selected_items = self.doc_tree.selectedItems()
        if selected_items:
            item = selected_items[0]
            doc_name = item.text(0)
            doc_type = item.text(1)
            doc_path = item.text(2)
            info = f"–ò–º—è: {doc_name}\n–¢–∏–ø: {doc_type}\n–ü—É—Ç—å: {doc_path}"
            QMessageBox.information(self, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ", info)

    def edit_templates_file(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ —à–∞–±–ª–æ–Ω–æ–≤"""
        dialog = TemplateEditorDialog(self, self.templates_file)
        dialog.exec()

    def reload_templates(self):
        """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            current_search = self.template_search_edit.text()
            self.load_templates()
            self.populate_template_tabs()
            if current_search:
                self.template_search_edit.setText(current_search)
                self.filter_templates(current_search)
            self.status_bar.showMessage("–®–∞–±–ª–æ–Ω—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
        except Exception as e:
            self.status_bar.showMessage(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —à–∞–±–ª–æ–Ω–æ–≤: {str(e)}")
            QMessageBox.critical(
                self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —à–∞–±–ª–æ–Ω—ã: {str(e)}"
            )

    def show_about(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ"""
        about_text = """
        –†–µ–¥–∞–∫—Ç–æ—Ä —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –¥–ª—è KOMPAS-3D
        
        –ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –≤—Å—Ç–∞–≤–∫–∏ —Ç–∏–ø–æ–≤—ã—Ö 
        —Ç–µ–∫—Å—Ç–æ–≤ –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è —á–µ—Ä—Ç–µ–∂–µ–π KOMPAS-3D.
        
        2025
        """
        QMessageBox.information(self, "–û –ø—Ä–æ–≥—Ä–∞–º–º–µ", about_text)

    def show_shortcuts(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏"""
        shortcuts_text = """
        –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏:
        Ctrl+K - –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ KOMPAS-3D
        Ctrl+Q - –ü–æ–ª—É—á–∏—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
        Ctrl+S - –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
        Ctrl+E - –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
        Ctrl+Shift+S - –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ PDF
        F5 - –û–±–Ω–æ–≤–∏—Ç—å —à–∞–±–ª–æ–Ω—ã
        F6 - –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        """
        QMessageBox.information(self, "–ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏", shortcuts_text)

    def populate_template_tabs(self, search_term=None):
        self.template_tabs.clear()

        # –í–∫–ª–∞–¥–∫–∞ "–í—Å–µ"
        all_tab = QWidget()
        all_layout = QVBoxLayout(all_tab)
        all_list = QListWidget()
        all_layout.addWidget(all_list)
        self.template_tabs.addTab(all_tab, "–í—Å–µ")
        all_list.setContextMenuPolicy(Qt.ContextMenuPolicy.CustomContextMenu)
        all_list.customContextMenuRequested.connect(
            lambda pos: self.show_template_context_menu(pos, all_list)
        )
        all_list.itemDoubleClicked.connect(self.insert_template)

        found_count = 0

        for category, templates in self.templates.items():
            tab = QWidget()
            tab_layout = QVBoxLayout(tab)
            list_widget = QListWidget()
            tab_layout.addWidget(list_widget)
            self.template_tabs.addTab(tab, category)
            list_widget.setContextMenuPolicy(Qt.ContextMenuPolicy.CustomContextMenu)
            list_widget.customContextMenuRequested.connect(
                lambda pos, lw=list_widget: self.show_template_context_menu(pos, lw)
            )
            list_widget.itemDoubleClicked.connect(self.insert_template)

            for template in templates:
                if isinstance(template, dict):
                    text = template.get("text", "")
                    variants = template.get("variants", [])
                    if (
                        search_term is None
                        or not search_term
                        or search_term.lower() in text.lower()
                        or any(
                            search_term.lower()
                            in (
                                variant.get("text", "")
                                if isinstance(variant, dict)
                                else variant
                            ).lower()
                            for variant in variants
                        )
                    ):
                        # –î–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π–Ω—ã—Ö –≤–∫–ª–∞–¥–æ–∫
                        item = QListWidgetItem(text)
                        item.setData(Qt.ItemDataRole.UserRole, template)
                        list_widget.addItem(item)

                        # –î–ª—è –≤–∫–ª–∞–¥–∫–∏ "–í—Å–µ"
                        all_item = QListWidgetItem(f"[{category}] {text}")
                        all_item.setData(Qt.ItemDataRole.UserRole, template)
                        all_list.addItem(all_item)

                        found_count += 1
                else:
                    # –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º
                    if (
                        search_term is None
                        or not search_term
                        or search_term.lower() in template.lower()
                    ):
                        item = QListWidgetItem(template)
                        item.setData(
                            Qt.ItemDataRole.UserRole, {"text": template, "variants": []}
                        )
                        list_widget.addItem(item)
                        all_item = QListWidgetItem(f"[{category}] {template}")
                        all_item.setData(
                            Qt.ItemDataRole.UserRole, {"text": template, "variants": []}
                        )
                        all_list.addItem(all_item)
                        found_count += 1

        if search_term:
            self.template_tabs.setCurrentIndex(0)
            self.status_bar.showMessage(
                f"–ù–∞–π–¥–µ–Ω–æ —à–∞–±–ª–æ–Ω–æ–≤: {found_count} –ø–æ –∑–∞–ø—Ä–æ—Å—É '{search_term}'"
            )
        else:
            self.status_bar.showMessage("–ü–æ–∫–∞–∑–∞–Ω—ã –≤—Å–µ —à–∞–±–ª–æ–Ω—ã")

    def show_template_context_menu(self, pos, list_widget):
        item = list_widget.itemAt(pos)
        if not item:
            return

        template = item.data(Qt.ItemDataRole.UserRole)
        if (
            not isinstance(template, dict)
            or "variants" not in template
            or not template["variants"]
        ):
            return

        menu = QMenu(self)
        style = self.style()

        for variant in template["variants"]:
            if isinstance(variant, dict):
                variant_text = variant.get("text", "")
                custom_input = variant.get("custom_input", False)
            else:
                variant_text = variant
                custom_input = False

            action = QAction(variant_text, self)
            if custom_input:
                icon = style.standardIcon(
                    QStyle.StandardPixmap.SP_FileDialogDetailedView
                )
                action.setIcon(icon)

            if custom_input:
                action.triggered.connect(
                    lambda checked, t=template[
                        "text"
                    ], v=variant_text: self.insert_custom_variant(t, v)
                )
            else:
                action.triggered.connect(
                    lambda checked, t=template[
                        "text"
                    ], v=variant_text: self.insert_template_variant(t, v)
                )
            menu.addAction(action)

        menu.exec(list_widget.mapToGlobal(pos))

    def insert_custom_variant(self, base_text, variant_text):
        custom_value, ok = QInputDialog.getText(
            self, "–í–≤–æ–¥ –∑–Ω–∞—á–µ–Ω–∏—è", f"–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {variant_text}:"
        )
        if ok and custom_value:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ variant_text –º–∞—Ä–∫–µ—Ä {}
            if "{}" in variant_text:
                # –í—Å—Ç–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –º–µ—Å—Ç–æ, —É–∫–∞–∑–∞–Ω–Ω–æ–µ –º–∞—Ä–∫–µ—Ä–æ–º
                full_text = f"{base_text} {variant_text.format(custom_value)}"
            else:
                # –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç: —Å—Ç–∞—Ä—ã–π –ø–æ—Ä—è–¥–æ–∫
                full_text = f"{base_text} {custom_value} {variant_text}"
            self.current_reqs_text.insertPlainText(full_text + "\n")
            self.status_bar.showMessage(f"–í—Å—Ç–∞–≤–ª–µ–Ω —à–∞–±–ª–æ–Ω: {full_text[:30]}...")

    def insert_template_variant(self, base_text, variant_text):
        full_text = f"{base_text}{variant_text}"
        self.current_reqs_text.insertPlainText(full_text + "\n")
        self.status_bar.showMessage(f"–í—Å—Ç–∞–≤–ª–µ–Ω —à–∞–±–ª–æ–Ω: {full_text[:30]}...")

    def update_active_document_info(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫—Ç–∏–≤–Ω–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–µ"""
        try:
            if not hasattr(self, "app7") or not self.app7:
                self.connect_status.setText("üî¥ –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
                self.connect_status.setStyleSheet("color: red;")
                self.active_doc_label.setText("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
                self.status_bar.showMessage("–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ KOMPAS-3D")
                return

            active_doc = self.app7.ActiveDocument
            if active_doc:
                doc_name = active_doc.Name
                doc_type = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø"
                try:
                    doc2D_s = active_doc._oleobj_.QueryInterface(
                        self.module7.NamesToIIDMap["IDrawingDocument"],
                        pythoncom.IID_IDispatch,
                    )
                    doc_type = "–ß–µ—Ä—Ç–µ–∂"
                except:
                    try:
                        doc3D_s = active_doc._oleobj_.QueryInterface(
                            self.module7.NamesToIIDMap["IDocument3D"],
                            pythoncom.IID_IDispatch,
                        )
                        doc_type = "3D-–º–æ–¥–µ–ª—å"
                    except:
                        try:
                            spec_s = active_doc._oleobj_.QueryInterface(
                                self.module7.NamesToIIDMap["ISpecificationDocument"],
                                pythoncom.IID_IDispatch,
                            )
                            doc_type = "–°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è"
                        except:
                            pass
                doc_path = active_doc.Path or "–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω"
                self.active_doc_label.setText(f"–î–æ–∫—É–º–µ–Ω—Ç: {doc_name} ({doc_type})")
                self.connect_status.setText("üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ")
                self.connect_status.setStyleSheet("color: green;")
                self.status_bar.showMessage(
                    f"–ê–∫—Ç–∏–≤–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç: {doc_name} ({doc_type}) - {doc_path}"
                )
                self.select_document_in_tree(active_doc)
            else:
                self.active_doc_label.setText("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
                self.status_bar.showMessage("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ KOMPAS-3D")
        except Exception as e:
            self.status_bar.showMessage(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ: {str(e)}"
            )
            self.active_doc_label.setText("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")

    def on_document_double_click(self, item, column):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–µ –≤ –¥–µ—Ä–µ–≤–µ"""
        doc_name = item.text(0)
        doc_type = item.text(1)
        if self.activate_document_by_name(doc_name):
            if doc_type == "–ß–µ—Ä—Ç–µ–∂":
                QTimer.singleShot(500, self.get_technical_requirements)
                self.status_bar.showMessage("–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π...")

    def activate_document_by_name(self, doc_name):
        """–ê–∫—Ç–∏–≤–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ –∏–º–µ–Ω–∏"""
        try:
            if not hasattr(self, "app7") or not self.app7:
                self.connect_to_kompas()
                if not hasattr(self, "app7") or not self.app7:
                    return False
            documents = self.app7.Documents
            for i in range(documents.Count):
                doc = documents.Item(i)
                if doc.Name == doc_name:
                    doc.Active = True
                    self.update_active_document_info()
                    self.status_bar.showMessage(f"–î–æ–∫—É–º–µ–Ω—Ç {doc_name} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
                    return True
            self.status_bar.showMessage(f"–î–æ–∫—É–º–µ–Ω—Ç {doc_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        except Exception as e:
            error_message = self.handle_kompas_error(e, "–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
            self.status_bar.showMessage("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", error_message)
            return False

    def insert_template(self, item):
        template = item.data(Qt.ItemDataRole.UserRole)
        if isinstance(template, dict):
            text = template.get("text", "")
            variants = template.get("variants", [])
            if variants:
                # –í—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é –≤–∞—Ä–∏–∞—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–∏ –¥–≤–æ–π–Ω–æ–º –∫–ª–∏–∫–µ
                self.insert_template_variant(text, variants[0])
            else:
                self.current_reqs_text.insertPlainText(text + "\n")
                self.status_bar.showMessage(f"–í—Å—Ç–∞–≤–ª–µ–Ω —à–∞–±–ª–æ–Ω: {text[:30]}...")
        else:
            # –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º
            self.current_reqs_text.insertPlainText(template + "\n")
            self.status_bar.showMessage(f"–í—Å—Ç–∞–≤–ª–µ–Ω —à–∞–±–ª–æ–Ω: {template[:30]}...")

    def get_technical_requirements(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∏–∑ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ KOMPAS-3D
            if not hasattr(self, "module7") or not self.module7:
                self.connect_to_kompas()
                if not hasattr(self, "module7") or not self.module7:
                    return

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
            active_doc = self.app7.ActiveDocument
            if not active_doc:
                self.status_bar.showMessage("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
                QMessageBox.warning(
                    self, "–í–Ω–∏–º–∞–Ω–∏–µ", "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ –ö–û–ú–ü–ê–°-3D"
                )
                return

            try:
                # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —á–µ—Ä—Ç–µ–∂–∞ –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
                drawing_document = self.module7.IDrawingDocument(active_doc)
                tech_demand = drawing_document.TechnicalDemand

                # –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å–æ–∑–¥–∞–Ω—ã –ª–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
                if not tech_demand.IsCreated:
                    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø—É—Å—Ç—ã—Ö —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
                    tt = tech_demand.Text
                    stroka = tt.Add().Add()
                    stroka.Str = "  "
                    # tech_demand.Create()
                    self.status_bar.showMessage(
                        "–°–æ–∑–¥–∞–Ω—ã –Ω–æ–≤—ã–µ –ø—É—Å—Ç—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è"
                    )
                    self.current_reqs_text.setPlainText("")
                    return

                # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
                text = tech_demand.Text
                if text.Count == 0:
                    self.status_bar.showMessage("–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –ø—É—Å—Ç—ã")
                    self.current_reqs_text.setPlainText("")
                    return

                # –ü–∞—Ä—Å–∏–Ω–≥ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
                formatted_text = self.parse_tech_req(text)
                self.current_reqs_text.setPlainText(formatted_text)
                doc_name = active_doc.Name
                self.status_bar.showMessage(
                    f"–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ {doc_name}"
                )
            except Exception as e:
                error_message = self.handle_kompas_error(
                    e, "–ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π"
                )
                print(error_message)
                self.status_bar.showMessage("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ—Ö. —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π")
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", error_message)

        except Exception as e:
            error_message = self.handle_kompas_error(e, "—Ä–∞–±–æ—Ç—ã —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º")
            self.status_bar.showMessage("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º")
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", error_message)

    def save_technical_requirements(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –≤ –∞–∫—Ç–∏–≤–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç"""
        self.apply_technical_requirements(save_document=True)

    def apply_technical_requirements(self, save_document=False):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∫ –∞–∫—Ç–∏–≤–Ω–æ–º—É –¥–æ–∫—É–º–µ–Ω—Ç—É"""
        try:
            if not hasattr(self, "module7") or not self.module7:
                self.connect_to_kompas()
                if not hasattr(self, "module7") or not self.module7:
                    return

            active_doc = self.app7.ActiveDocument
            if not active_doc:
                self.status_bar.showMessage("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
                QMessageBox.warning(
                    self, "–í–Ω–∏–º–∞–Ω–∏–µ", "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ –ö–û–ú–ü–ê–°-3D"
                )
                return

            text_content = self.current_reqs_text.toPlainText().strip()

            try:
                drawing_document = self.module7.IDrawingDocument(active_doc)
                tech_demand = drawing_document.TechnicalDemand

                if not text_content:
                    if tech_demand.IsCreated:
                        text_obj = tech_demand.Text
                        while text_obj.Count > 0:
                            line = text_obj.TextLines[0]
                            line.Delete()
                        if hasattr(tech_demand, "Update"):
                            tech_demand.Update()
                        if hasattr(drawing_document, "Update"):
                            drawing_document.Update()
                        elif hasattr(active_doc, "Update"):
                            active_doc.Update()
                        self.status_bar.showMessage("–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –æ—á–∏—â–µ–Ω—ã")
                    else:
                        self.status_bar.showMessage(
                            "–ù–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è"
                        )
                    return

                if not tech_demand.IsCreated:
                    tt = tech_demand.Text
                    stroka = tt.Add().Add()
                    stroka.Str = "  "

                text_obj = tech_demand.Text
                while text_obj.Count > 0:
                    line = text_obj.TextLines[0]
                    line.Delete()

                lines = text_content.split("\n")
                lines = [line.strip() for line in lines if line.strip()]
                processed_lines = []

                if self.auto_numbering_var:
                    cleaned_lines = []
                    should_number = []
                    for i, line in enumerate(lines):
                        clean_line = re.sub(r"^\d+\.\s*", "", line).lstrip()
                        cleaned_lines.append(clean_line)
                        if i > 0 and (
                            (len(clean_line) > 0 and clean_line[0].islower())
                            or clean_line.startswith("-")
                            or clean_line.startswith("‚Äì")
                        ):
                            should_number.append(False)
                        else:
                            should_number.append(True)
                    for i, (line, should_num) in enumerate(
                        zip(cleaned_lines, should_number)
                    ):
                        processed_lines.append((line, should_num))
                else:
                    for line in lines:
                        num_match = re.match(r"^(\d+)\.\s*(.*)", line)
                        if num_match:
                            req_text = num_match.group(2).strip()
                            processed_lines.append((req_text, True))
                        else:
                            indent_match = re.match(r"^\s+(.+)", line)
                            if indent_match:
                                req_text = indent_match.group(1).strip()
                                processed_lines.append((req_text, False))
                            else:
                                processed_lines.append((line, True))

                for line_text, is_numbered in processed_lines:
                    try:
                        text_line = text_obj.Add()
                        text_line.Str = line_text
                        text_line.Numbering = 1 if is_numbered else 0
                    except Exception as line_error:
                        print(
                            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç—Ä–æ–∫–∏ '{line_text}': {str(line_error)}"
                        )

                if hasattr(tech_demand, "Update"):
                    tech_demand.Update()
                if hasattr(drawing_document, "Update"):
                    drawing_document.Update()
                elif hasattr(active_doc, "Update"):
                    active_doc.Update()

                if save_document:
                    try:
                        active_doc.Save()
                        self.status_bar.showMessage("–î–æ–∫—É–º–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
                    except Exception as e:
                        error_msg = self.handle_kompas_error(e, "—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞")
                        self.status_bar.showMessage(
                            "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"
                        )

                doc_name = active_doc.Name
                self.status_bar.showMessage(
                    f"–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –∫ {doc_name}"
                    + (" –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã" if save_document else " (–±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞)")
                )
                QMessageBox.information(
                    self,
                    "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
                    f"–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ {'—Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã' if save_document else '–ø—Ä–∏–º–µ–Ω–µ–Ω—ã'} –≤ {doc_name}",
                )
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –ø–æ—Å–ª–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
                self.get_technical_requirements()
            except Exception as e:
                error_message = self.handle_kompas_error(
                    e, "–ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π"
                )
                self.status_bar.showMessage("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ —Ç–µ—Ö. —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π")
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", error_message)
        except Exception as e:
            error_message = self.handle_kompas_error(e, "—Ä–∞–±–æ—Ç—ã —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º")
            self.status_bar.showMessage("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º")
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", error_message)

    def select_document_in_tree(self, document):
        """–í—ã–±–æ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ –¥–µ—Ä–µ–≤–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
        try:
            if not document:
                return
            doc_name = document.Name
            for i in range(self.doc_tree.topLevelItemCount()):
                item = self.doc_tree.topLevelItem(i)
                if item.text(0) == doc_name:
                    self.doc_tree.setCurrentItem(item)
                    self.doc_tree.scrollToItem(item)
                    return
            self.update_documents_tree()
            for i in range(self.doc_tree.topLevelItemCount()):
                item = self.doc_tree.topLevelItem(i)
                if item.text(0) == doc_name:
                    self.doc_tree.setCurrentItem(item)
                    self.doc_tree.scrollToItem(item)
                    return
        except Exception:
            pass

    def update_documents_tree(self, search_term=None):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–µ—Ä–µ–≤–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
        try:
            if not hasattr(self, "app7") or not self.app7:
                self.status_bar.showMessage("–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ KOMPAS-3D")
                return

            self.doc_tree.clear()
            documents = self.app7.Documents
            doc_count = 0

            for i in range(documents.Count):
                doc = documents.Item(i)
                doc_name = doc.Name
                if search_term and search_term.lower() not in doc_name.lower():
                    continue

                doc_type = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø"
                try:
                    doc._oleobj_.QueryInterface(
                        self.module7.NamesToIIDMap["IDrawingDocument"],
                        pythoncom.IID_IDispatch,
                    )
                    doc_type = "–ß–µ—Ä—Ç–µ–∂"
                except:
                    try:
                        doc._oleobj_.QueryInterface(
                            self.module7.NamesToIIDMap["IDocument3D"],
                            pythoncom.IID_IDispatch,
                        )
                        doc_type = "3D-–º–æ–¥–µ–ª—å"
                    except:
                        try:
                            doc._oleobj_.QueryInterface(
                                self.module7.NamesToIIDMap["ISpecificationDocument"],
                                pythoncom.IID_IDispatch,
                            )
                            doc_type = "–°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è"
                        except:
                            pass

                doc_path = doc.Path or "–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω"
                item = QTreeWidgetItem(self.doc_tree)
                item.setText(0, doc_name)
                item.setText(1, doc_type)
                item.setText(2, doc_path)

                if (
                    self.app7.ActiveDocument
                    and doc.Name == self.app7.ActiveDocument.Name
                ):
                    self.doc_tree.setCurrentItem(item)
                    self.doc_tree.scrollToItem(item)

                doc_count += 1

            self.status_bar.showMessage(f"–ù–∞–π–¥–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {doc_count}")
            self.docs_count_label.setText(f"–î–æ–∫—É–º–µ–Ω—Ç–æ–≤: {doc_count}")
        except Exception as e:
            self.status_bar.showMessage(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–µ—Ä–µ–≤–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {str(e)}"
            )
            QMessageBox.critical(
                self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–µ—Ä–µ–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {str(e)}"
            )

    def periodic_update(self):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö"""
        try:
            if self.is_kompas_running():
                self.update_active_document_info()
            else:
                self.connect_status.setText("üî¥ –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
                self.connect_status.setStyleSheet("color: red;")
                self.active_doc_label.setText("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
        except Exception:
            pass

    def format_text(self, format_type):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
        cursor = self.current_reqs_text.textCursor()
        if not cursor.hasSelection():
            self.status_bar.showMessage("–ù–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return

        fmt = QTextCharFormat()
        if format_type == "bold":
            fmt.setFontWeight(
                QFont.Weight.Bold
                if not cursor.charFormat().font().bold()
                else QFont.Weight.Normal
            )
        elif format_type == "italic":
            fmt.setFontItalic(not cursor.charFormat().font().italic())
        elif format_type == "underline":
            fmt.setFontUnderline(not cursor.charFormat().font().underline())

        cursor.mergeCharFormat(fmt)
        self.current_reqs_text.setTextCursor(cursor)
        self.status_bar.showMessage(f"–ü—Ä–∏–º–µ–Ω–µ–Ω —Ñ–æ—Ä–º–∞—Ç '{format_type}'")

    def create_new_document(self, doc_type="drawing"):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ KOMPAS-3D"""
        try:
            if not hasattr(self, "app7") or not self.app7:
                self.connect_to_kompas()
                if not hasattr(self, "app7") or not self.app7:
                    return

            if doc_type == "drawing":
                doc = self.app7.Document2D()
                doc.Create(False, True)
                doc_type_name = "—á–µ—Ä—Ç–µ–∂"
            else:
                doc = self.app7.Document3D()
                doc.Create(False, True)
                doc_type_name = "3D-–º–æ–¥–µ–ª—å"

            doc.Active = True
            self.update_active_document_info()
            self.update_documents_tree()
            self.status_bar.showMessage(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç: {doc_type_name}")
        except Exception as e:
            error_message = self.handle_kompas_error(e, "—Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
            self.status_bar.showMessage("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", error_message)

    def show_new_document_dialog(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –Ω–æ–≤–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        dialog = QInputDialog(self)
        dialog.setWindowTitle("–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
        dialog.setLabelText("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞:")
        dialog.setComboBoxItems(["–ß–µ—Ä—Ç–µ–∂", "3D-–º–æ–¥–µ–ª—å"])
        dialog.setFixedSize(300, 150)
        if dialog.exec():
            choice = dialog.textValue()
            if choice == "–ß–µ—Ä—Ç–µ–∂":
                self.create_new_document("drawing")
            elif choice == "3D-–º–æ–¥–µ–ª—å":
                self.create_new_document("3d")

    def disconnect_from_kompas(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç KOMPAS-3D"""
        try:
            if hasattr(self, "app7") and self.app7:
                self.app7 = None
                self.module7 = None
                self.api7 = None
                self.const7 = None
                gc.collect()
                self.connect_status.setText("üî¥ –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
                self.connect_status.setStyleSheet("color: red;")
                self.status_bar.showMessage("–û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç KOMPAS-3D")
                self.doc_tree.clear()
                return True
            else:
                self.status_bar.showMessage("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ KOMPAS-3D")
                return False
        except Exception as e:
            self.status_bar.showMessage(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –æ—Ç KOMPAS-3D: {str(e)}")
            return False

    def closeEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            if hasattr(self, "app7") and self.app7:
                self.disconnect_from_kompas()
            pythoncom.CoUninitialize()
            event.accept()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {str(e)}")
            event.accept()

    def handle_kompas_error(self, e, operation="–æ–ø–µ—Ä–∞—Ü–∏–∏"):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å KOMPAS-3D"""
        error_msg = str(e)
        error_code = None
        if "0x" in error_msg:
            try:
                match = re.search(r"0x[0-9A-Fa-f]+", error_msg)
                if match:
                    error_code = match.group(0)
            except:
                pass

        if error_code:
            message = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ {operation} –≤ KOMPAS-3D.\n\n–ö–æ–¥ –æ—à–∏–±–∫–∏: {error_code}"
            if error_code == "0x80004005":
                message += (
                    "\n\n–ù–µ—É–∫–∞–∑–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–±–ª–µ–º–∞ —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ –æ–±—ä–µ–∫—Ç—É."
                )
            elif error_code == "0x80020009":
                message += "\n\n–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ KOMPAS-3D. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞."
            elif error_code == "0x8002000A":
                message += "\n\n–ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –∏–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä."
            elif error_code == "0x80020006":
                message += "\n\n–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∏–º—è –∏–ª–∏ –º–µ—Ç–æ–¥."
            message += "\n\n–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ KOMPAS-3D –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.\n2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä–∞–≤–∞ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞.\n3. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ KOMPAS-3D."
        else:
            message = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ {operation} –≤ KOMPAS-3D.\n\n{error_msg}"
        self.status_bar.showMessage(f"–û—à–∏–±–∫–∞: {error_msg}")
        return message

    def apply_list_formatting(self, tech_req):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–∏—Å–∫–æ–º –∫ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º"""
        try:
            if hasattr(tech_req, "FormatAsList"):
                tech_req.FormatAsList()
                if hasattr(tech_req, "ListParams"):
                    tech_req.ListParams = True
                if hasattr(tech_req, "ListType"):
                    tech_req.ListType = 0
                self.apply_numbering(tech_req)
                self.status_bar.showMessage(
                    "–ü—Ä–∏–º–µ–Ω–µ–Ω–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–æ–º –∏ –Ω—É–º–µ—Ä–∞—Ü–∏—è (–º–µ—Ç–æ–¥ 1)"
                )
                return True
            elif hasattr(tech_req, "Text") and hasattr(tech_req.Text, "FormatAsList"):
                tech_req.Text.FormatAsList()
                if hasattr(tech_req.Text, "ListParams"):
                    tech_req.Text.ListParams = True
                if hasattr(tech_req.Text, "ListType"):
                    tech_req.Text.ListType = 0
                self.apply_numbering(tech_req)
                self.status_bar.showMessage(
                    "–ü—Ä–∏–º–µ–Ω–µ–Ω–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–æ–º –∏ –Ω—É–º–µ—Ä–∞—Ü–∏—è (–º–µ—Ç–æ–¥ 2)"
                )
                return True
            else:
                try:
                    text_obj = tech_req.Text
                    if hasattr(text_obj, "ListParams"):
                        text_obj.ListParams = True
                    if hasattr(text_obj, "ListType"):
                        text_obj.ListType = 0
                    for i in range(text_obj.Count):
                        line = text_obj.TextLines[i]
                        if hasattr(line, "ListStyle"):
                            line.ListStyle = True
                        if hasattr(line, "ListParams"):
                            line.ListParams = True
                        if hasattr(line, "ListType"):
                            line.ListType = 0
                    self.apply_numbering(tech_req)
                    self.status_bar.showMessage(
                        "–ü—Ä–∏–º–µ–Ω–µ–Ω–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–æ–º –∏ –Ω—É–º–µ—Ä–∞—Ü–∏—è (–º–µ—Ç–æ–¥ 3)"
                    )
                    return True
                except Exception as e:
                    self.status_bar.showMessage(
                        f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–æ–º: {str(e)}"
                    )
                    return False
        except Exception as e:
            self.status_bar.showMessage(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–ø–∏—Å–∫–æ–º: {str(e)}")
            return False

    def apply_numbering(self, tech_req):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω—É–º–µ—Ä–∞—Ü–∏–∏ –∫ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º —Å—Ä–µ–¥—Å—Ç–≤–∞–º–∏ API KOMPAS"""
        try:
            if hasattr(tech_req, "SetNumbering"):
                tech_req.SetNumbering()
                if hasattr(tech_req, "ListParams"):
                    tech_req.ListParams = True
                if hasattr(tech_req, "ListType"):
                    tech_req.ListType = 0
                if hasattr(tech_req, "AutoNumbering"):
                    tech_req.AutoNumbering = True
                self.status_bar.showMessage("–ü—Ä–∏–º–µ–Ω–µ–Ω–∞ –Ω—É–º–µ—Ä–∞—Ü–∏—è (–º–µ—Ç–æ–¥ 1)")
                return True
            elif hasattr(tech_req, "Text") and hasattr(tech_req.Text, "SetNumbering"):
                tech_req.Text.SetNumbering()
                if hasattr(tech_req.Text, "ListParams"):
                    tech_req.Text.ListParams = True
                if hasattr(tech_req.Text, "ListType"):
                    tech_req.Text.ListType = 0
                if hasattr(tech_req.Text, "AutoNumbering"):
                    tech_req.Text.AutoNumbering = True
                self.status_bar.showMessage("–ü—Ä–∏–º–µ–Ω–µ–Ω–∞ –Ω—É–º–µ—Ä–∞—Ü–∏—è (–º–µ—Ç–æ–¥ 2)")
                return True
            elif hasattr(tech_req, "Text") and hasattr(tech_req.Text, "NumberingStyle"):
                tech_req.Text.NumberingStyle = True
                if hasattr(tech_req.Text, "ListParams"):
                    tech_req.Text.ListParams = True
                if hasattr(tech_req.Text, "ListType"):
                    tech_req.Text.ListType = 0
                if hasattr(tech_req.Text, "AutoNumbering"):
                    tech_req.Text.AutoNumbering = True
                self.status_bar.showMessage("–ü—Ä–∏–º–µ–Ω–µ–Ω–∞ –Ω—É–º–µ—Ä–∞—Ü–∏—è (–º–µ—Ç–æ–¥ 3)")
                return True
            else:
                try:
                    text_obj = tech_req.Text
                    if hasattr(text_obj, "ListParams"):
                        text_obj.ListParams = True
                    if hasattr(text_obj, "ListType"):
                        text_obj.ListType = 0
                    if hasattr(text_obj, "AutoNumbering"):
                        text_obj.AutoNumbering = True
                    for i in range(text_obj.Count):
                        line = text_obj.TextLines[i]
                        if hasattr(line, "NumberingStyle"):
                            line.NumberingStyle = True
                        elif hasattr(line, "Numbering"):
                            line.Numbering = True
                        if hasattr(line, "ListParams"):
                            line.ListParams = True
                        if hasattr(line, "ListType"):
                            line.ListType = 0
                    if hasattr(text_obj, "ListParams"):
                        text_obj.ListParams = True
                    self.status_bar.showMessage("–ü—Ä–∏–º–µ–Ω–µ–Ω–∞ –Ω—É–º–µ—Ä–∞—Ü–∏—è (–º–µ—Ç–æ–¥ 4)")
                    return True
                except Exception as e:
                    self.status_bar.showMessage(
                        f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –Ω—É–º–µ—Ä–∞—Ü–∏—é: {str(e)}"
                    )
                    return False
        except Exception as e:
            self.status_bar.showMessage(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –Ω—É–º–µ—Ä–∞—Ü–∏–∏: {str(e)}")
            return False

    def apply_auto_numbering(self):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –Ω—É–º–µ—Ä–∞—Ü–∏–∏ –∫ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º"""
        try:
            text_content = self.current_reqs_text.toPlainText().strip()
            if not text_content:
                return

            lines = text_content.split("\n")
            lines = [line.strip() for line in lines if line.strip()]
            cleaned_lines = []
            should_number = []

            for i, line in enumerate(lines):
                clean_line = re.sub(r"^\d+\.\s*", "", line)
                cleaned_lines.append(clean_line)
                if i > 0 and (
                    (len(clean_line) > 0 and clean_line[0].islower())
                    or clean_line.startswith("-")
                    or clean_line.startswith("‚Äì")
                ):
                    should_number.append(False)
                else:
                    should_number.append(True)

            result_lines = []
            number_counter = 1
            for i, (line, should_num) in enumerate(zip(cleaned_lines, should_number)):
                if should_num:
                    result_lines.append(f"{number_counter}. {line}")
                    number_counter += 1
                else:
                    result_lines.append(f"    {line}")

            self.current_reqs_text.setPlainText("\n".join(result_lines))
            self.status_bar.showMessage("–ê–≤—Ç–æ–Ω—É–º–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∞")
        except Exception as e:
            self.status_bar.showMessage(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –∞–≤—Ç–æ–Ω—É–º–µ—Ä–∞—Ü–∏–∏: {str(e)}"
            )
            print(f"Error applying auto numbering: {str(e)}")

    def remove_auto_numbering(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –Ω—É–º–µ—Ä–∞—Ü–∏–∏ –∏–∑ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π"""
        try:
            text_content = self.current_reqs_text.toPlainText().strip()
            if not text_content:
                return

            lines = text_content.split("\n")
            result_lines = []
            for line in lines:
                clean_line = re.sub(r"^\d+\.\s*", "", line)
                result_lines.append(clean_line)

            self.current_reqs_text.setPlainText("\n".join(result_lines))
        except Exception as e:
            self.status_bar.showMessage(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–≤—Ç–æ–Ω—É–º–µ—Ä–∞—Ü–∏–∏: {str(e)}")
            print(f"Error removing auto numbering: {str(e)}")

    def toggle_auto_numbering(self, is_enabled=None):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –∞–≤—Ç–æ–Ω—É–º–µ—Ä–∞—Ü–∏–∏"""
        try:
            if is_enabled is None:
                is_enabled = self.auto_numbering_var
            else:
                self.auto_numbering_var = is_enabled

            if is_enabled:
                self.apply_auto_numbering()
                # Note: PyQt6 does not support direct key binding like Tkinter; consider adding toolbar/menu actions
            else:
                self.remove_auto_numbering()
        except Exception as e:
            self.status_bar.showMessage(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –∞–≤—Ç–æ–Ω—É–º–µ—Ä–∞—Ü–∏–∏: {str(e)}"
            )
            print(f"Error toggling auto numbering: {str(e)}")

    def parse_tech_req(self, text_lines):
        """–ü–∞—Ä—Å–∏–Ω–≥ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∏–∑ –æ–±—ä–µ–∫—Ç–∞ TextLines"""
        formatted_text = ""
        count = 0
        current_req = ""
        current_req_num = 0

        i = 0
        while i < text_lines.Count:
            line = text_lines.TextLines[i]
            line_text = line.Str.strip()
            if not line_text:
                i += 1
                continue

            if line.Numbering == 1:
                if current_req:
                    formatted_text += f"{current_req_num}. {current_req}\n"
                count += 1
                current_req_num = count
                current_req = line_text
            else:
                if current_req:
                    if (
                        not current_req.endswith(" ")
                        and not current_req.endswith("-")
                        and not line_text.startswith("-")
                    ):
                        current_req += " "
                    current_req += line_text
                else:
                    count += 1
                    current_req_num = count
                    current_req = line_text

            if i == text_lines.Count - 1 and current_req:
                formatted_text += f"{current_req_num}. {current_req}\n"
            i += 1

        return formatted_text

    def clean_tech_req_line(self, line):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç—Ä–æ–∫–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –æ—Ç –Ω—É–º–µ—Ä–∞—Ü–∏–∏ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        line = re.sub(r"^\s*\d+\.\s*", "", line)
        line = re.sub(r"^\s*[‚Ä¢\-‚Äì‚Äî]\s*", "", line)
        return line.strip()

    def toggle_theme(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º"""
        self.dark_mode = not self.dark_mode
        self.apply_theme()
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
        self.save_theme_setting()
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–º—É –¥–ª—è –≤—Å–µ—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö –¥–æ—á–µ—Ä–Ω–∏—Ö –æ–∫–æ–Ω
        for child in self.findChildren(TemplateEditorDialog):
            child.dark_mode = self.dark_mode
            child.apply_theme()
        self.status_bar.showMessage(
            f"–¢–µ–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {'—Ç–µ–º–Ω—É—é' if self.dark_mode else '—Å–≤–µ—Ç–ª—É—é'}"
        )

    def save_to_pdf(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–µ—Ä—Ç–µ–∂–∞ –≤ PDF —Å –ø–æ—à–∞–≥–æ–≤—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ KOMPAS-3D
            if not hasattr(self, "app7") or not self.app7:
                self.connect_to_kompas()
                if not hasattr(self, "app7") or not self.app7:
                    self.status_bar.showMessage("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ KOMPAS-3D")
                    QMessageBox.critical(
                        self, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ KOMPAS-3D"
                    )
                    return

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
            active_doc = self.app7.ActiveDocument
            if not active_doc:
                self.status_bar.showMessage("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
                QMessageBox.warning(
                    self, "–û—à–∏–±–∫–∞", "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ KOMPAS-3D"
                )
                return

            doc_name = active_doc.Name

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–µ—Ä—Ç–µ–∂)
            doc_type = active_doc.DocumentType
            if doc_type != 1:  # 1 - —ç—Ç–æ —Ç–∏–ø —á–µ—Ä—Ç–µ–∂–∞
                self.status_bar.showMessage("–ê–∫—Ç–∏–≤–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–µ—Ä—Ç–µ–∂–æ–º")
                QMessageBox.warning(
                    self, "–û—à–∏–±–∫–∞", "–ê–∫—Ç–∏–≤–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–µ—Ä—Ç–µ–∂–æ–º"
                )
                return
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É
            doc_path = active_doc.PathName
            if not doc_path:
                self.status_bar.showMessage("–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç")
                return

            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É—Ç–∏ –¥–ª—è PDF
            doc_dir = os.path.dirname(doc_path)
            doc_name_without_ext = os.path.splitext(os.path.basename(doc_path))[0]
            pdf_folder = os.path.join(doc_dir, "–ß–µ—Ä—Ç–µ–∂–∏ –≤ pdf")

            pdf_path = os.path.join(pdf_folder, f"{doc_name_without_ext}.pdf")
            # –ü–æ–ª—É—á–µ–Ω–∏–µ 2D –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
            try:
                doc_2d = win32com.client.Dispatch(active_doc, "ksDocument2D")
            except Exception as e:
                self.status_bar.showMessage("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
                QMessageBox.critical(
                    self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å 2D –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: {str(e)}"
                )
                return

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ PDF
            try:
                result = doc_2d.SaveAs(pdf_path)
                if result:
                    self.status_bar.showMessage(f"–ß–µ—Ä—Ç–µ–∂ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ PDF: {pdf_path}")
                    QMessageBox.information(
                        self, "–£—Å–ø–µ—Ö", f"–ß–µ—Ä—Ç–µ–∂ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ PDF:\n{pdf_path}"
                    )
            except Exception as e:
                self.status_bar.showMessage("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ PDF")
                QMessageBox.critical(
                    self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ PDF: {str(e)}"
                )
                return

        except Exception as e:
            error_message = self.handle_kompas_error(e, "—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ PDF")
            self.status_bar.showMessage("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ PDF")
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", error_message)


class TemplateEditorDialog(QDialog):
    def __init__(self, parent, templates_file):
        super().__init__(parent)
        self.setWindowTitle("–†–µ–¥–∞–∫—Ç–æ—Ä —à–∞–±–ª–æ–Ω–æ–≤")
        self.setGeometry(200, 200, 1200, 700)
        self.setMinimumSize(800, 600)
        self.templates_file = templates_file
        self.templates = parent.templates.copy()
        self.selected_template = None
        self.dark_mode = parent.dark_mode  # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π —Ç–µ–º–æ–π
        ThemeManager.apply_theme(self, self.dark_mode)  # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É
        self.init_ui()

    def apply_theme(self):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º—ã –¥–ª—è –¥–∏–∞–ª–æ–≥–∞"""
        ThemeManager.apply_theme(self, self.dark_mode)

    def init_ui(self):
        layout = QHBoxLayout(self)
        splitter = QSplitter(Qt.Orientation.Horizontal)

        # –õ–µ–≤–∞—è —á–∞—Å—Ç—å: –¥–µ—Ä–µ–≤–æ —à–∞–±–ª–æ–Ω–æ–≤
        left_widget = QWidget()
        left_layout = QVBoxLayout(left_widget)
        left_label = QLabel("<b>–®–∞–±–ª–æ–Ω—ã</b>")
        left_label.setStyleSheet("padding-bottom: 5px;")
        left_layout.addWidget(left_label)
        self.template_tree = QTreeWidget()
        self.template_tree.setHeaderLabels(["–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–¢–µ–∫—Å—Ç"])
        self.template_tree.setColumnWidth(0, 200)
        self.template_tree.itemClicked.connect(self.load_template_to_editor)
        left_layout.addWidget(self.template_tree)
        splitter.addWidget(left_widget)

        # –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å: —Ä–µ–¥–∞–∫—Ç–æ—Ä
        right_widget = QWidget()
        right_layout = QVBoxLayout(right_widget)
        right_label = QLabel("<b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞</b>")
        right_label.setStyleSheet("padding-bottom: 5px;")
        right_layout.addWidget(right_label)

        # –ö–∞—Ç–µ–≥–æ—Ä–∏—è
        category_layout = QHBoxLayout()
        category_label = QLabel("–ö–∞—Ç–µ–≥–æ—Ä–∏—è:")
        category_label.setFixedWidth(80)
        category_layout.addWidget(category_label)
        self.category_combo = QComboBox()
        self.category_combo.setEditable(True)
        self.category_combo.addItems(list(self.templates.keys()))
        category_layout.addWidget(self.category_combo)
        right_layout.addLayout(category_layout)

        # –¢–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω–∞
        template_label = QLabel("–¢–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω–∞:")
        template_label.setStyleSheet("padding-top: 5px;")
        right_layout.addWidget(template_label)
        self.template_text = QLineEdit()
        right_layout.addWidget(self.template_text)

        # –í–∞—Ä–∏–∞–Ω—Ç—ã
        variants_group = QGroupBox("–í–∞—Ä–∏–∞–Ω—Ç—ã")
        variants_layout = QVBoxLayout(variants_group)
        self.variants_table = QTableWidget()
        self.variants_table.setColumnCount(2)
        self.variants_table.setHorizontalHeaderLabels(
            ["–¢–µ–∫—Å—Ç", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥"]
        )
        self.variants_table.horizontalHeader().setSectionResizeMode(
            0, QHeaderView.ResizeMode.Stretch
        )
        self.variants_table.horizontalHeader().setSectionResizeMode(
            1, QHeaderView.ResizeMode.ResizeToContents
        )
        self.variants_table.setEditTriggers(QTableWidget.EditTrigger.DoubleClicked)
        self.variants_table.itemDoubleClicked.connect(self.toggle_custom_input)
        variants_layout.addWidget(self.variants_table)

        # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
        variant_controls = QHBoxLayout()
        self.variant_text = QLineEdit()
        self.variant_text.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç")
        variant_controls.addWidget(self.variant_text)
        self.custom_input_check = QPushButton("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥")
        self.custom_input_check.setCheckable(True)
        self.custom_input_check.setStyleSheet(
            """
            QPushButton:checked {
                background-color: #409EFF;
                color: white;
                border-color: #409EFF;
            }
        """
        )
        variant_controls.addWidget(self.custom_input_check)

        add_variant_btn = QPushButton("–î–æ–±–∞–≤–∏—Ç—å")
        add_variant_btn.clicked.connect(self.add_variant)
        variant_controls.addWidget(add_variant_btn)
        edit_variant_btn = QPushButton("–ò–∑–º–µ–Ω–∏—Ç—å")
        edit_variant_btn.clicked.connect(self.edit_variant)
        variant_controls.addWidget(edit_variant_btn)
        delete_variant_btn = QPushButton("–£–¥–∞–ª–∏—Ç—å")
        delete_variant_btn.clicked.connect(self.delete_variant)
        variant_controls.addWidget(delete_variant_btn)
        variants_layout.addLayout(variant_controls)
        right_layout.addWidget(variants_group)

        # –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
        preview_group = QGroupBox("–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä")
        preview_layout = QVBoxLayout(preview_group)
        self.preview_text = QTextEdit()
        self.preview_text.setReadOnly(True)
        preview_layout.addWidget(self.preview_text)
        right_layout.addWidget(preview_group)

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º —Ç–µ–º—ã
        buttons_layout = QHBoxLayout()
        self.add_button = QPushButton("–î–æ–±–∞–≤–∏—Ç—å —à–∞–±–ª–æ–Ω")
        self.add_button.clicked.connect(self.add_template)
        buttons_layout.addWidget(self.add_button)
        self.edit_button = QPushButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è")
        self.edit_button.clicked.connect(self.edit_template)
        buttons_layout.addWidget(self.edit_button)
        self.delete_button = QPushButton("–£–¥–∞–ª–∏—Ç—å —à–∞–±–ª–æ–Ω")
        self.delete_button.clicked.connect(self.delete_template)
        buttons_layout.addWidget(self.delete_button)
        self.save_button = QPushButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –∑–∞–∫—Ä—ã—Ç—å")
        self.save_button.setObjectName("saveButton")
        self.save_button.clicked.connect(self.save_and_close)
        buttons_layout.addWidget(self.save_button)
        right_layout.addLayout(buttons_layout)

        splitter.addWidget(right_widget)
        splitter.setStretchFactor(0, 2)
        splitter.setStretchFactor(2, 3)
        layout.addWidget(splitter)

        self.populate_tree()

    def populate_tree(self):
        """–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ—Ä–µ–≤–∞ —à–∞–±–ª–æ–Ω–æ–≤"""
        self.template_tree.clear()
        for category, templates in self.templates.items():
            for template in templates:
                if isinstance(template, dict):
                    text = template.get("text", "")
                    item = QTreeWidgetItem(self.template_tree)
                    item.setText(0, category)
                    item.setText(1, text)
                    item.setData(0, Qt.ItemDataRole.UserRole, (category, template))
                else:
                    item = QTreeWidgetItem(self.template_tree)
                    item.setText(0, category)
                    item.setText(1, template)
                    item.setData(
                        0,
                        Qt.ItemDataRole.UserRole,
                        (category, {"text": template, "variants": []}),
                    )

    def load_template_to_editor(self, item):
        category, template = item.data(0, Qt.ItemDataRole.UserRole)
        self.selected_template = (category, template)
        self.category_combo.setCurrentText(category)
        self.template_text.setText(template.get("text", ""))
        self.variants_table.setRowCount(0)
        variants = template.get("variants", [])
        for variant in variants:
            row = self.variants_table.rowCount()
            self.variants_table.insertRow(row)
            text = variant.get("text", "") if isinstance(variant, dict) else variant
            custom = (
                variant.get("custom_input", False)
                if isinstance(variant, dict)
                else False
            )
            text_item = QTableWidgetItem(text)
            text_item.setFlags(
                text_item.flags() | Qt.ItemFlag.ItemIsEditable
            )  # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–∞—è
            self.variants_table.setItem(row, 0, text_item)
            custom_item = QTableWidgetItem("–î–∞" if custom else "–ù–µ—Ç")
            # –û—Å—Ç–∞–≤–ª—è–µ–º –Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º, –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            custom_item.setFlags(custom_item.flags() & ~Qt.ItemFlag.ItemIsEditable)
            self.variants_table.setItem(row, 1, custom_item)

    def load_variant_details(self, item):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ—Ç–∞–ª–µ–π –≤–∞—Ä–∏–∞–Ω—Ç–∞ –≤ –ø–æ–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        variant = item.data(Qt.ItemDataRole.UserRole)
        self.variant_text.setText(variant.get("text", ""))
        self.custom_input_check.setChecked(variant.get("custom_input", False))

    def add_variant(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞"""
        text = self.variant_text.text().strip()
        custom_input = self.custom_input_check.isChecked()
        if not text:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞—Ä–∏–∞–Ω—Ç–∞")
            return
        row = self.variants_table.rowCount()
        self.variants_table.insertRow(row)
        text_item = QTableWidgetItem(text)
        text_item.setFlags(
            text_item.flags() | Qt.ItemFlag.ItemIsEditable
        )  # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–∞—è
        self.variants_table.setItem(row, 0, text_item)
        custom_item = QTableWidgetItem("–î–∞" if custom_input else "–ù–µ—Ç")
        custom_item.setFlags(
            custom_item.flags() & ~Qt.ItemFlag.ItemIsEditable
        )  # –ù–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–∞—è
        self.variants_table.setItem(row, 1, custom_item)
        self.variant_text.clear()

    def edit_variant(self):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É '–ò–∑–º–µ–Ω–∏—Ç—å'"""
        selected_row = self.variants_table.currentRow()
        if selected_row == -1:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è")
            return

        current_text = self.variants_table.item(selected_row, 0).text()
        current_custom = self.variants_table.item(selected_row, 1).text() == "–î–∞"

        new_text, ok = QInputDialog.getText(
            self,
            "–ò–∑–º–µ–Ω–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç",
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç:",
            QLineEdit.EchoMode.Normal,
            current_text,
        )
        if ok and new_text:
            text_item = QTableWidgetItem(new_text)
            text_item.setFlags(text_item.flags() | Qt.ItemFlag.ItemIsEditable)
            self.variants_table.setItem(selected_row, 0, text_item)
            custom_item = QTableWidgetItem("–î–∞" if current_custom else "–ù–µ—Ç")
            custom_item.setFlags(custom_item.flags() & ~Qt.ItemFlag.ItemIsEditable)
            self.variants_table.setItem(selected_row, 1, custom_item)

    def delete_variant(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞"""
        selected = self.variants_table.currentRow()
        if selected == -1:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return
        self.variants_table.removeRow(selected)

    def add_template(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞"""
        category = self.category_combo.currentText().strip()
        text = self.template_text.text().strip()
        if not category or not text:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–£–∫–∞–∂–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ —Ç–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω–∞")
            return

        # –°–æ–±–∏—Ä–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
        variants = []
        for row in range(self.variants_table.rowCount()):
            text = self.variants_table.item(row, 0).text()
            custom_input = self.variants_table.item(row, 1).text() == "–î–∞"
            variants.append({"text": text, "custom_input": custom_input})

        new_template = {"text": text, "variants": variants}

        if category not in self.templates:
            self.templates[category] = []
        self.templates[category].append(new_template)
        self.populate_tree()
        self.clear_editor()
        self.parent().status_bar.showMessage(f"–î–æ–±–∞–≤–ª–µ–Ω —à–∞–±–ª–æ–Ω: {text}")

    def edit_template(self):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —à–∞–±–ª–æ–Ω–∞"""
        if not self.selected_template:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return

        old_category, old_template = self.selected_template
        new_category = self.category_combo.currentText().strip()
        new_text = self.template_text.text().strip()
        if not new_category or not new_text:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–£–∫–∞–∂–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ —Ç–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω–∞")
            return

        # –°–æ–±–∏—Ä–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
        variants = []
        for row in range(self.variants_table.rowCount()):
            text = self.variants_table.item(row, 0).text()
            custom_input = self.variants_table.item(row, 1).text() == "–î–∞"
            variants.append({"text": text, "custom_input": custom_input})

        new_template = {"text": new_text, "variants": variants}

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —à–∞–±–ª–æ–Ω
        self.templates[old_category].remove(old_template)
        if not self.templates[old_category]:
            del self.templates[old_category]

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π
        if new_category not in self.templates:
            self.templates[new_category] = []
        self.templates[new_category].append(new_template)

        self.populate_tree()
        self.clear_editor()
        self.selected_template = None
        self.parent().status_bar.showMessage(f"–®–∞–±–ª–æ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω: {new_text}")

    def delete_template(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞"""
        if not self.selected_template:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return

        category, template = self.selected_template
        self.templates[category].remove(template)
        if not self.templates[category]:
            del self.templates[category]
        self.populate_tree()
        self.clear_editor()
        self.selected_template = None
        self.parent().status_bar.showMessage(f"–®–∞–±–ª–æ–Ω —É–¥–∞–ª–µ–Ω")

    def clear_editor(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø–æ–ª–µ–π —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞"""
        self.template_text.clear()
        self.variants_table.setRowCount(0)  # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        self.variant_text.clear()
        self.custom_input_check.setChecked(False)

    def save_and_close(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏ –∑–∞–∫—Ä—ã—Ç–∏–µ"""
        try:
            with open(self.templates_file, "w", encoding="utf-8") as f:
                json.dump(self.templates, f, ensure_ascii=False, indent=4)
            self.parent().templates = self.templates.copy()
            self.parent().reload_templates()
            self.parent().status_bar.showMessage("–®–∞–±–ª–æ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
            self.accept()
        except Exception as e:
            QMessageBox.critical(
                self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —à–∞–±–ª–æ–Ω—ã: {str(e)}"
            )

    def update_preview(self):
        if not self.selected_template:
            return
        category, template = self.selected_template
        text = self.template_text.text()
        variants = [
            self.variants_table.item(i, 0).text()
            for i in range(self.variants_table.rowCount())
        ]
        preview = f"{text}\n" + "\n".join([f"  - {v}" for v in variants])
        self.preview_text.setPlainText(preview)

    def toggle_custom_input(self, item):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è '–î–∞'/'–ù–µ—Ç' –≤ –∫–æ–ª–æ–Ω–∫–µ '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥' –ø–æ –¥–≤–æ–π–Ω–æ–º—É –∫–ª–∏–∫—É"""
        column = item.column()
        row = item.row()

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–ª–æ–Ω–∫—É "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥" (–∏–Ω–¥–µ–∫—Å 1)
        if column == 1:
            current_value = self.variants_table.item(row, 1).text()
            new_value = "–ù–µ—Ç" if current_value == "–î–∞" else "–î–∞"
            new_item = QTableWidgetItem(new_value)
            new_item.setFlags(
                new_item.flags() & ~Qt.ItemFlag.ItemIsEditable
            )  # –ù–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–∞—è
            self.variants_table.setItem(row, 1, new_item)
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            self.update_preview()


class ThemeManager:
    DARK_THEME = """
        QMainWindow, QDialog {
            background-color: #1F2526;
        }
        QWidget {
            font-size: 12px;
            letter-spacing: 0.5px;
        }
        QGroupBox {
            font-size: 12px;
            font-weight: bold;
            border: 1px solid #303940;
            border-radius: 5px;
            margin-top: 10px;
            padding: 10px;
            background-color: #2A3033;
            color: #D3D7DA;
        }
        QLabel {
            color: #D3D7DA;
        }
        QLineEdit, QComboBox {
            padding: 6px;
            border: 1px solid #303940;
            border-radius: 4px;
            background-color: #2A3033;
            color: #E6ECEF;
        }
        QLineEdit:focus, QComboBox:focus {
            border-width: 2px;
            border-color: #409EFF;
        }
        QPushButton {
            padding: 8px 16px;
            border: 1px solid #303940;
            border-radius: 4px;
            background-color: #2A3033;
            color: #E6ECEF;
        }
        QPushButton:hover {
            background-color: #3A4446;
            border-color: #409EFF;
            color: #409EFF;
        }
        QPushButton:pressed {
            background-color: #1E2527;
        }
        QTextEdit, QTableWidget, QTreeWidget, QListWidget {
            border: 1px solid #303940;
            border-radius: 4px;
            background-color: #2A3033;
            color: #E6ECEF;
        }
        QTabWidget::pane {
            border: 1px solid #303940;
            background-color: #2A3033;
        }
        QTabBar::tab {
            padding: 10px 20px;
            border-bottom: 2px solid transparent;
            color: #E6ECEF;
            background-color: #2A3033;
        }
        QTabBar::tab:selected {
            border-bottom: 2px solid #409EFF;
            color: #409EFF;
            background: qlineargradient(x1:0, y1:0, x2:0, y2:1, stop:0 #3A4446, stop:1 #2A3033);
        }
        QTreeWidget::item:selected, QListWidget::item:selected, QTableWidget::item:selected {
            background-color: #3A4446;
            color: #409EFF;
        }
        QToolBar {
            background-color: #2A3033;
            border-bottom: 1px solid #303940;
            padding: 4px;
        }
        QToolButton {
            padding: 6px;
            margin: 2px;
            border-radius: 4px;
            background-color: #2A3033;
            color: #E6ECEF;
        }
        QToolButton:hover {
            background-color: #3A4446;
            color: #409EFF;
        }
        QStatusBar {
            background-color: #2A3033;
            border-top: 1px solid #303940;
            color: #A6ACAF;
        }
        QMenuBar {
            background-color: #2A3033;
            color: #E6ECEF;
        }
        QMenuBar::item {
            background-color: #2A3033;
            color: #E6ECEF;
            padding: 4px 8px;
        }
        QMenuBar::item:selected {
            background-color: #3A4446;
            color: #409EFF;
        }
        QMenu {
            background-color: #2A3033;
            border: 1px solid #303940;
            color: #E6ECEF;
        }
        QMenu::item {
            padding: 4px 20px;
            background-color: #2A3033;
            color: #E6ECEF;
        }
        QMenu::item:selected {
            background-color: #3A4446;
            color: #409EFF;
        }
        QScrollBar:vertical, QScrollBar:horizontal {
            background-color: #2A3033;
            width: 14px;
            height: 14px;
            margin: 0px;
            border: 1px solid #303940;
        }
        QScrollBar::handle {
            background-color: #606266;
            border-radius: 7px;
        }
        QScrollBar::handle:hover {
            background-color: #A6ACAF;
        }
        QScrollBar::add-line, QScrollBar::sub-line {
            background: none;
            border: none;
        }
        QScrollBar::add-page, QScrollBar::sub-page {
            background-color: #2A3033;
        }
        QHeaderView::section {
            background-color: #252B2D;
            color: #E6ECEF;
            padding: 4px;
            border: 1px solid #303940;
        }
        QComboBox::drop-down {
            border: none;
            width: 20px;
        }
        QComboBox::down-arrow {
            width: 10px;
            height: 10px;
        }
        QComboBox QAbstractItemView {
            background-color: #2A3033;
            border: 1px solid #303940;
            color: #E6ECEF;
            selection-background-color: #3A4446;
            selection-color: #409EFF;
        }
        QSplitter::handle {
            background-color: #303940;
            width: 4px;
            height: 4px;
        }
        QSplitter::handle:hover {
            background-color: #409EFF;
        }
        QSplitter::handle:pressed {
            background-color: #1E2527;
        }
    """

    LIGHT_THEME = """
        QMainWindow, QDialog {
            background-color: #F5F6FA;
        }
        QWidget {
            font-size: 12px;
            letter-spacing: 0.5px;
        }
        QGroupBox {
            font-size: 12px;
            font-weight: bold;
            border: 1px solid #DCDFE6;
            border-radius: 5px;
            margin-top: 10px;
            padding: 10px;
            background-color: #FFFFFF;
            color: #212529;
        }
        QLabel {
            color: #212529;
        }
        QLineEdit, QComboBox {
            padding: 6px;
            border: 1px solid #DCDFE6;
            border-radius: 4px;
            background-color: #FFFFFF;
            color: #303133;
        }
        QLineEdit:focus, QComboBox:focus {
            border-width: 2px;
            border-color: #409EFF;
        }
        QPushButton {
            padding: 8px 16px;
            border: 1px solid #DCDFE6;
            border-radius: 4px;
            background-color: #FFFFFF;
            color: #606266;
        }
        QPushButton:hover {
            background-color: #ECF5FF;
            border-color: #409EFF;
            color: #409EFF;
        }
        QPushButton:pressed {
            background-color: #D6EBFF;
        }
        QTextEdit, QTableWidget, QTreeWidget, QListWidget {
            border: 1px solid #DCDFE6;
            border-radius: 4px;
            background-color: #FFFFFF;
            color: #303133;
        }
        QTabWidget::pane {
            border: 1px solid #DCDFE6;
            background-color: #FFFFFF;
        }
        QTabBar::tab {
            padding: 10px 20px;
            border-bottom: 2px solid transparent;
            color: #606266;
            background-color: #FFFFFF;
        }
        QTabBar::tab:selected {
            border-bottom: 2px solid #409EFF;
            color: #409EFF;
            background: qlineargradient(x1:0, y1:0, x2:0, y2:1, stop:0 #ECF5FF, stop:1 #FFFFFF);
        }
        QTreeWidget::item:selected, QListWidget::item:selected, QTableWidget::item:selected {
            background-color: #E6F7FF;
            color: #409EFF;
        }
        QToolBar {
            background-color: #FFFFFF;
            border-bottom: 1px solid #DCDFE6;
            padding: 4px;
        }
        QToolButton {
            padding: 6px;
            margin: 2px;
            border-radius: 4px;
            background-color: #FFFFFF;
            color: #606266;
        }
        QToolButton:hover {
            background-color: #ECF5FF;
            color: #409EFF;
        }
        QStatusBar {
            background-color: #FFFFFF;
            border-top: 1px solid #DCDFE6;
            color: #606266;
        }
        QMenuBar {
            background-color: #FFFFFF;
            color: #303133;
        }
        QMenuBar::item {
            background-color: #FFFFFF;
            color: #303133;
            padding: 4px 8px;
        }
        QMenuBar::item:selected {
            background-color: #ECF5FF;
            color: #409EFF;
        }
        QMenu {
            background-color: #FFFFFF;
            border: 1px solid #DCDFE6;
            color: #303133;
        }
        QMenu::item {
            padding: 4px 20px;
            background-color: #FFFFFF;
            color: #303133;
        }
        QMenu::item:selected {
            background-color: #ECF5FF;
            color: #409EFF;
        }
        QScrollBar:vertical, QScrollBar:horizontal {
            background-color: #FFFFFF;
            width: 14px;
            height: 14px;
            margin: 0px;
            border: 1px solid #DCDFE6;
        }
        QScrollBar::handle {
            background-color: #C0C4CC;
            border-radius: 7px;
        }
        QScrollBar::handle:hover {
            background: #A6ACAF;
        }
        QScrollBar::add-line, QScrollBar::sub-line {
            background: none;
            border: none;
        }
        QScrollBar::add-page, QScrollBar::sub-page {
            background-color: #FFFFFF;
        }
        QHeaderView::section {
            background-color: #F5F6FA;
            color: #303133;
            padding: 4px;
            border: 1px solid #DCDFE6;
        }
        QComboBox::drop-down {
            border: none;
            width: 20px;
        }
        QComboBox::down-arrow {
            width: 10px;
            height: 10px;
        }
        QComboBox QAbstractItemView {
            background-color: #FFFFFF;
            border: 1px solid #DCDFE6;
            color: #303133;
            selection-background-color: #ECF5FF;
            selection-color: #409EFF;
        }
        QSplitter::handle {
            background-color: #DCDFE6;
            width: 4px;
            height: 4px;
            border-radius: 3px
        }
        QSplitter::handle:hover {
            background-color: #409EFF;
        }
        QSplitter::handle:pressed {
            background-color: #D6EBFF;
        }
    """

    @staticmethod
    def apply_theme(widget, dark_mode):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º—ã –∫ –≤–∏–¥–∂–µ—Ç—É"""
        if dark_mode:
            widget.setStyleSheet(ThemeManager.DARK_THEME)
        else:
            widget.setStyleSheet(ThemeManager.LIGHT_THEME)


if __name__ == "__main__":
    pythoncom.CoInitialize()
    try:
        app = QApplication(sys.argv)
        window = KompasApp()
        window.show()
        sys.exit(app.exec())
    except Exception as e:
        QMessageBox.critical(None, "–û—à–∏–±–∫–∞", f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {str(e)}")
    finally:
        pythoncom.CoUninitialize()
