import os
import sys
import json
import tkinter as tk
from tkinter import ttk, messagebox, simpledialog, font
from tkinter import filedialog
import pythoncom
import win32com.client
from win32com.client import Dispatch, gencache
import re
import gc

class KompasApp:
    def __init__(self, root):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        self.root = root
        self.root.title("–†–µ–¥–∞–∫—Ç–æ—Ä —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π KOMPAS-3D")
        self.root.geometry("1400x900")
        self.root.minsize(1000, 700)
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–∫–æ–Ω–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        icon_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), "icons", "icon.ico")
        if os.path.exists(icon_path):
            self.root.iconbitmap(icon_path)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        self.templates = {}
        self.template_search_var = tk.StringVar()
        self.template_search_var.trace("w", self.filter_templates)
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –∞–≤—Ç–æ–Ω—É–º–µ—Ä–∞—Ü–∏–∏
        self.auto_numbering_var = tk.BooleanVar(value=False)
        self.auto_numbering_var.trace("w", self.toggle_auto_numbering)
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å—Ç–∞—Ç—É—Å–∞ —Å—Ä–∞–∑—É –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        self.status_bar = ttk.Label(self.root, text="–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...", anchor=tk.W)
        self.status_bar.pack(side=tk.BOTTOM, fill=tk.X)
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∏–ª—è
        self.set_style()
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤
        self.load_templates()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.create_ui()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é
        self.create_menu()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à
        self.create_shortcuts()
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
        self.set_status("–ì–æ—Ç–æ–≤–æ")
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API Kompas
        self.module7 = None
        self.api7 = None
        self.const7 = None
        self.app7 = None
        self.connect_to_kompas()
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        self.update_active_document_info()
        self.update_documents_tree()
        
        # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö
        self.root.after(1000, self.periodic_update)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.root.protocol("WM_DELETE_WINDOW", self.on_closing)
        
    def set_style(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∏–ª—è –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        style = ttk.Style()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Å—Ç–∏–ª–µ–π
        style.configure('TFrame', background='#f5f5f5')
        style.configure('TLabel', background='#f5f5f5')
        style.configure('TLabelframe', background='#f5f5f5')
        style.configure('TLabelframe.Label', background='#f5f5f5', font=('Segoe UI', 10, 'bold'))
        
        # –°—Ç–∏–ª—å –¥–ª—è –ø–∞–Ω–µ–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        style.configure('Toolbar.TFrame', background='#e9e9e9')
        
        # –°—Ç–∏–ª—å –¥–ª—è –ø–∞–Ω–µ–ª–∏ –ø–æ–∏—Å–∫–∞
        style.configure('Search.TFrame', background='#e9e9e9')
        
        # –°—Ç–∏–ª—å –¥–ª—è –∫–Ω–æ–ø–æ–∫
        style.configure('TButton', padding=3)
        
        # –°—Ç–∏–ª—å –¥–ª—è —Å—Ç–∞—Ç—É—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
        style.configure('Status.TLabel', background='#e9e9e9', relief='sunken', anchor='w', padding=(5, 2))
        style.configure('StatusGreen.TLabel', background='#e9e9e9', foreground='green', relief='sunken')
        style.configure('StatusRed.TLabel', background='#e9e9e9', foreground='red', relief='sunken')
        
        # –°—Ç–∏–ª—å –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ Treeview
        style.configure('Treeview.Heading', font=('Segoe UI', 10, 'bold'))
        
        # –°—Ç–∏–ª—å –¥–ª—è –≤–∫–ª–∞–¥–æ–∫
        style.configure('TNotebook.Tab', padding=[12, 4])
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        style.configure('TButton', padding=5, font=('Segoe UI', 10))
        style.configure('TLabel', font=('Segoe UI', 10))
        style.configure('TNotebook', background='#f0f0f0')
        style.configure('TNotebook.Tab', padding=[12, 6], font=('Segoe UI', 10))
        style.configure('Treeview', font=('Segoe UI', 10), rowheight=28)
        style.configure('Treeview.Heading', font=('Segoe UI', 10, 'bold'))
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è —Å—Ç—Ä–æ–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
        style.configure('StatusBar.TLabel', padding=3, background='#e0e0e0', relief='sunken')
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –ø–∞–Ω–µ–ª–∏ –ø–æ–∏—Å–∫–∞
        style.configure('Search.TEntry', padding=5)
        style.configure('Search.TButton', padding=3)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –ø–∞–Ω–µ–ª–∏ —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏
        style.configure('Toolbar.TButton', padding=3)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è Listbox (—à–∞–±–ª–æ–Ω—ã)
        self.root.option_add('*Listbox*font', ('Segoe UI', 10))
        self.root.option_add('*Listbox*background', '#ffffff')
        self.root.option_add('*Listbox*selectBackground', '#4a6984')
        self.root.option_add('*Listbox*selectForeground', '#ffffff')
        
    def load_templates(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∏–∑ —Ñ–∞–π–ª–∞ JSON"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —à–∞–±–ª–æ–Ω–æ–≤ –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_home = os.path.expanduser("~")
            app_folder = os.path.join(user_home, "KOMPAS-TR")
            
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if not os.path.exists(app_folder):
                os.makedirs(app_folder)
                
            self.templates_file = os.path.join(app_folder, "templates.json")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            if not os.path.exists(self.templates_file):
                self.set_status("–§–∞–π–ª —à–∞–±–ª–æ–Ω–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–∞–π–ª —à–∞–±–ª–æ–Ω–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
                old_templates_file = os.path.join(os.path.dirname(os.path.abspath(__file__)), "templates.json")
                
                if os.path.exists(old_templates_file):
                    # –ö–æ–ø–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª —à–∞–±–ª–æ–Ω–æ–≤ –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                    with open(old_templates_file, 'r', encoding='utf-8') as f_old:
                        templates_data = json.load(f_old)
                    
                    with open(self.templates_file, 'w', encoding='utf-8') as f_new:
                        json.dump(templates_data, f_new, ensure_ascii=False, indent=4)
                        
                    self.set_status("–§–∞–π–ª —à–∞–±–ª–æ–Ω–æ–≤ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω –≤ –ø–∞–ø–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                else:
                    # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª —à–∞–±–ª–æ–Ω–æ–≤
                    with open(self.templates_file, 'w', encoding='utf-8') as f:
                        json.dump({"–û–±—â–∏–µ": []}, f, ensure_ascii=False, indent=4)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —à–∞–±–ª–æ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞
            with open(self.templates_file, 'r', encoding='utf-8') as f:
                self.templates = json.load(f)
                
            self.set_status(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {sum(len(templates) for templates in self.templates.values())} —à–∞–±–ª–æ–Ω–æ–≤")
            
        except Exception as e:
            self.set_status(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤: {str(e)}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —à–∞–±–ª–æ–Ω—ã: {str(e)}")
            # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å —à–∞–±–ª–æ–Ω–æ–≤ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            self.templates = {"–û–±—â–∏–µ": []}
            
    def connect_to_kompas(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ KOMPAS-3D"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            if hasattr(self, 'app7') and self.app7:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                try:
                    app_name = self.app7.ApplicationName(FullName=False)
                    self.connect_status.config(text="üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ", foreground='green')
                    self.set_status(f"–£–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ {app_name}")
                    return True
                except Exception as e:
                    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–±—É–µ–º –∑–∞–Ω–æ–≤–æ
                    self.app7 = None
                    self.set_status("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è, –ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è...")
            
            # –ü—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∑–∞–ø—É—â–µ–Ω–Ω–æ–º—É KOMPAS-3D
            try:
                self.set_status("–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∑–∞–ø—É—â–µ–Ω–Ω–æ–º—É KOMPAS-3D...")
                self.app7 = win32com.client.Dispatch("Kompas.Application.7")
                app_name = self.app7.ApplicationName(FullName=False)
                self.module7, self.api7, self.const7 = self.get_kompas_api7()
                self.connect_status.config(text="üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ", foreground='green')
                self.set_status(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –∑–∞–ø—É—â–µ–Ω–Ω–æ–º—É {app_name}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–µ—Ä–µ–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
                self.update_documents_tree()
                
                return True
            except Exception as e:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∑–∞–ø—É—â–µ–Ω–Ω–æ–º—É, –ø—Ä–æ–±—É–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤—ã–π
                try:
                    self.set_status("–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ KOMPAS-3D...")
                    self.app7 = win32com.client.Dispatch("Kompas.Application.7")
                    self.app7.Visible = True
                    self.app7.HideMessage = True
                    self.module7, self.api7, self.const7 = self.get_kompas_api7()
                    app_name = self.app7.ApplicationName(FullName=False)
                    self.connect_status.config(text="üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ", foreground='green')
                    self.set_status(f"–ó–∞–ø—É—â–µ–Ω –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω {app_name}")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–µ—Ä–µ–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
                    self.update_documents_tree()
                    
                    return True
                except Exception as e:
                    self.connect_status.config(text="üî¥ –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", foreground='red')
                    error_message = self.handle_kompas_error(e, "–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
                    self.set_status("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ KOMPAS-3D")
                    messagebox.showerror("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", error_message)
                    return False
                    
        except Exception as e:
            self.connect_status.config(text="üî¥ –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", foreground='red')
            error_message = self.handle_kompas_error(e, "–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
            self.set_status("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ KOMPAS-3D")
            messagebox.showerror("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", error_message)
            return False
            
    def check_kompas_connection(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ KOMPAS-3D —Å –≤—ã–≤–æ–¥–æ–º —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if self.is_kompas_running():
            app_name = self.app7.ApplicationName(FullName=True)
            version = self.app7.ApplicationVersion()
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏", 
                              f"–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ KOMPAS-3D\n\n"
                              f"–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: {app_name}\n"
                              f"–í–µ—Ä—Å–∏—è: {version}")
            self.set_status(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ {app_name} –≤–µ—Ä—Å–∏–∏ {version}")
            return True
        else:
            result = messagebox.askyesno("–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", 
                                       "–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ KOMPAS-3D.\n\n"
                                       "–•–æ—Ç–∏—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è?")
            if result:
                return self.connect_to_kompas()
            return False
            
    def get_kompas_api7(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ API Kompas 3D –≤–µ—Ä—Å–∏–∏ 7"""
        module = gencache.EnsureModule("{69AC2981-37C0-4379-84FD-5DD2F3C0A520}", 0, 1, 0)
        api = module.IKompasAPIObject(
            Dispatch("Kompas.Application.7")._oleobj_.QueryInterface(module.IKompasAPIObject.CLSID,
                                                                    pythoncom.IID_IDispatch))
        const = gencache.EnsureModule("{75C9F5D0-B5B8-4526-8681-9903C567D2ED}", 0, 1, 0).constants
        return module, api, const
        
    def is_kompas_running(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ KOMPAS-3D"""
        try:
            return hasattr(self, 'app7') and self.app7 is not None
        except:
            return False

    def create_ui(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é
        self.create_menu()
        
        # –ì–ª–∞–≤–Ω—ã–π —Ñ—Ä–µ–π–º
        main_frame = ttk.Frame(self.root)
        main_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å - –ø–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        toolbar_frame = self.create_toolbar(main_frame)
        toolbar_frame.pack(side=tk.TOP, fill=tk.X)
        
        # –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ
        doc_frame = ttk.LabelFrame(main_frame, text="–ê–∫—Ç–∏–≤–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç")
        doc_frame.pack(fill=tk.X, pady=(0, 5))
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        doc_info_frame = ttk.Frame(doc_frame)
        doc_info_frame.pack(fill=tk.X, padx=5, pady=5)
        
        # –ò–∫–æ–Ω–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏ —Å—Ç–∞—Ç—É—Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        icon_frame = ttk.Frame(doc_info_frame)
        icon_frame.pack(side=tk.LEFT, padx=(0, 10))
        
        # –ò–∫–æ–Ω–∫–∞ KOMPAS
        ttk.Label(icon_frame, text="üìê", font=('Segoe UI', 16)).pack(side=tk.TOP)
        
        # –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        self.connect_status = ttk.Label(icon_frame, text="üî¥ –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", foreground='red')
        self.connect_status.pack(side=tk.TOP)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ
        doc_text_frame = ttk.Frame(doc_info_frame)
        doc_text_frame.pack(side=tk.LEFT, fill=tk.X, expand=True)
        
        self.active_doc_label = ttk.Label(doc_text_frame, text="–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞", 
                                       font=('Segoe UI', 10, 'bold'), wraplength=600)
        self.active_doc_label.pack(anchor="w")
        
        doc_desc_label = ttk.Label(doc_text_frame, 
                                 text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –Ω–æ–≤—ã–π –≤ KOMPAS-3D")
        doc_desc_label.pack(anchor="w")
        
        # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ 2 –ø–∞–Ω–µ–ª–∏
        paned = ttk.PanedWindow(main_frame, orient=tk.HORIZONTAL)
        paned.pack(fill=tk.BOTH, expand=True, pady=5)
        
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - –¥–µ—Ä–µ–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        left_frame = ttk.LabelFrame(paned, text="–û—Ç–∫—Ä—ã—Ç—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã")
        
        # –ü–∞–Ω–µ–ª—å –ø–æ–∏—Å–∫–∞ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        search_doc_frame = ttk.Frame(left_frame, style='Search.TFrame')
        search_doc_frame.pack(fill=tk.X, padx=5, pady=(5, 0))
        
        ttk.Label(search_doc_frame, text="üîç", font=('Segoe UI', 9)).pack(side=tk.LEFT, padx=(0, 5))
        self.doc_search_var = tk.StringVar()
        self.doc_search_var.trace_add("write", self.filter_documents_tree)
        self.doc_search_entry = ttk.Entry(search_doc_frame, textvariable=self.doc_search_var)
        self.doc_search_entry.pack(side=tk.LEFT, fill=tk.X, expand=True)
        
        # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–µ—Ä–µ–≤–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        refresh_btn = ttk.Button(search_doc_frame, text="üîÑ", width=3,
                               command=self.update_documents_tree)
        refresh_btn.pack(side=tk.RIGHT, padx=(5, 0))
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Treeview –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        tree_frame = ttk.Frame(left_frame)
        tree_frame.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        # –£–ª—É—á—à–µ–Ω–Ω—ã–π Treeview —Å —Å–∫—Ä–æ–ª–ª–±–∞—Ä–∞–º–∏ –¥–ª—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–π –∏ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        self.doc_tree = ttk.Treeview(tree_frame, style='Treeview')
        self.doc_tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        
        # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞
        v_scrollbar = ttk.Scrollbar(tree_frame, orient="vertical", command=self.doc_tree.yview)
        v_scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        self.doc_tree.configure(yscrollcommand=v_scrollbar.set)
        
        # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞
        h_scrollbar = ttk.Scrollbar(left_frame, orient="horizontal", command=self.doc_tree.xview)
        h_scrollbar.pack(fill=tk.X)
        self.doc_tree.configure(xscrollcommand=h_scrollbar.set)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–æ–Ω–æ–∫
        self.doc_tree["columns"] = ("type", "path")
        self.doc_tree.column("#0", width=150, minwidth=100)
        self.doc_tree.column("type", width=100, minwidth=50)
        self.doc_tree.column("path", width=300, minwidth=200)
        
        self.doc_tree.heading("#0", text="–ò–º—è")
        self.doc_tree.heading("type", text="–¢–∏–ø")
        self.doc_tree.heading("path", text="–ü—É—Ç—å")
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –¥–µ—Ä–µ–≤–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        self.doc_tree.bind("<Double-1>", self.on_document_double_click)
        
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –¥–µ—Ä–µ–≤–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        self.doc_tree_context_menu = tk.Menu(self.doc_tree, tearoff=0)
        self.doc_tree_context_menu.add_command(label="–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", command=self.activate_selected_document)
        self.doc_tree_context_menu.add_command(label="–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", command=self.show_document_info)
        self.doc_tree.bind("<Button-3>", self.show_doc_tree_context_menu)
        
        paned.add(left_frame, weight=1)
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - —à–∞–±–ª–æ–Ω—ã –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
        right_frame = ttk.Frame(paned)
        
        # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–æ–π –ø–∞–Ω–µ–ª–∏ –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
        right_paned = ttk.PanedWindow(right_frame, orient=tk.VERTICAL)
        right_paned.pack(fill=tk.BOTH, expand=True)
        
        # –ë–ª–æ–∫ —Å —à–∞–±–ª–æ–Ω–∞–º–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
        templates_frame = ttk.LabelFrame(right_paned, text="–®–∞–±–ª–æ–Ω—ã —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π")
        
        # –ü–∞–Ω–µ–ª—å –ø–æ–∏—Å–∫–∞ –¥–ª—è —à–∞–±–ª–æ–Ω–æ–≤
        search_template_frame = ttk.Frame(templates_frame)
        search_template_frame.pack(fill=tk.X, padx=5, pady=5)
        
        search_label = ttk.Label(search_template_frame, text="–ü–æ–∏—Å–∫ —à–∞–±–ª–æ–Ω–∞:")
        search_label.pack(side=tk.LEFT, padx=(0, 5))
        
        self.template_search_var = tk.StringVar()
        self.template_search_var.trace_add("write", self.filter_templates)
        self.template_search_entry = ttk.Entry(search_template_frame, textvariable=self.template_search_var)
        self.template_search_entry.pack(side=tk.LEFT, fill=tk.X, expand=True)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π —à–∞–±–ª–æ–Ω–æ–≤
        self.template_tabs = ttk.Notebook(templates_frame)
        self.template_tabs.pack(fill=tk.BOTH, expand=True, padx=8, pady=8)
        
        # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
        self.populate_template_tabs()
        
        right_paned.add(templates_frame, weight=2)
        
        # –ë–ª–æ–∫ —Å —Ç–µ–∫—É—â–∏–º–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏
        current_reqs_frame = ttk.LabelFrame(right_paned, text="–¢–µ–∫—É—â–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è")
        
        # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
        text_frame = ttk.Frame(current_reqs_frame)
        text_frame.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Text widget —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        self.current_reqs_text = tk.Text(text_frame, wrap=tk.WORD, undo=True)
        self.current_reqs_text.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π —Ç–µ–∫—Å—Ç–∞
        self.current_reqs_text.tag_configure("bold", font=("TkDefaultFont", 10, "bold"))
        self.current_reqs_text.tag_configure("italic", font=("TkDefaultFont", 10, "italic"))
        self.current_reqs_text.tag_configure("underline", underline=1)
        
        # Vertical scrollbar
        v_scrollbar = ttk.Scrollbar(text_frame, orient="vertical", command=self.current_reqs_text.yview)
        v_scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        self.current_reqs_text.configure(yscrollcommand=v_scrollbar.set)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏
        buttons_frame = ttk.Frame(current_reqs_frame)
        buttons_frame.pack(fill=tk.X, padx=5, pady=5)
        
        ttk.Button(buttons_frame, text="–ü–æ–ª—É—á–∏—Ç—å", 
                  command=self.get_technical_requirements).pack(side=tk.LEFT, padx=5)
        ttk.Button(buttons_frame, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", 
                  command=self.save_technical_requirements).pack(side=tk.LEFT, padx=5)
        ttk.Button(buttons_frame, text="–ü—Ä–∏–º–µ–Ω–∏—Ç—å", 
                  command=lambda: self.apply_technical_requirements()).pack(side=tk.LEFT, padx=5)
        ttk.Button(buttons_frame, text="–û—á–∏—Å—Ç–∏—Ç—å", 
                  command=lambda: self.current_reqs_text.delete(1.0, tk.END)).pack(side=tk.LEFT, padx=5)
        
        right_paned.add(current_reqs_frame, weight=3)
        
        paned.add(right_frame, weight=3)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
        status_frame = ttk.Frame(self.root)
        status_frame.pack(side=tk.BOTTOM, fill=tk.X)
        
        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        ttk.Separator(status_frame, orient='horizontal').pack(fill=tk.X)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ—Ä–µ–π–º–∞ –¥–ª—è —Å—Ç—Ä–æ–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
        status_inner_frame = ttk.Frame(status_frame, style='Status.TFrame')
        status_inner_frame.pack(fill=tk.X, padx=1, pady=1)
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Å—Ç—Ä–æ–∫—É —Å—Ç–∞—Ç—É—Å–∞
        if hasattr(self, 'status_bar'):
            self.status_bar.destroy()
        
        # –õ–µ–≤–∞—è —á–∞—Å—Ç—å —Å—Ç—Ä–æ–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ - —Å–æ–æ–±—â–µ–Ω–∏—è
        self.status_bar = ttk.Label(status_inner_frame, text="–ì–æ—Ç–æ–≤–æ", style='Status.TLabel')
        self.status_bar.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=5, pady=2)
        
        # –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å —Å—Ç—Ä–æ–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        status_right_frame = ttk.Frame(status_inner_frame)
        status_right_frame.pack(side=tk.RIGHT, padx=5)
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        self.docs_count_label = ttk.Label(status_right_frame, text="–î–æ–∫—É–º–µ–Ω—Ç–æ–≤: 0")
        self.docs_count_label.pack(side=tk.RIGHT, padx=5)
        
        # –í–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        version_label = ttk.Label(status_right_frame, text="v1.0 (2025)")
        version_label.pack(side=tk.RIGHT, padx=5)
        
    def create_menu(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        menu = tk.Menu(self.root)
        self.root.config(menu=menu)
        
        # –ú–µ–Ω—é "–§–∞–π–ª"
        file_menu = tk.Menu(menu, tearoff=0)
        menu.add_cascade(label="–§–∞–π–ª", menu=file_menu)
        file_menu.add_command(label="–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ KOMPAS-3D", 
                             command=self.connect_to_kompas,
                             accelerator="Ctrl+K")
        file_menu.add_command(label="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ", 
                             command=self.check_kompas_connection)
        file_menu.add_separator()
        file_menu.add_command(label="–ü–æ–ª—É—á–∏—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è", 
                              command=self.get_technical_requirements,
                              accelerator="Ctrl+G")
        file_menu.add_command(label="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è", 
                              command=self.save_technical_requirements,
                              accelerator="Ctrl+S")
        file_menu.add_command(label="–ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è", 
                              command=lambda: self.apply_technical_requirements(),
                              accelerator="Ctrl+E")
        file_menu.add_separator()
        file_menu.add_command(label="–û—Ç–∫–ª—é—á–∏—Ç—å—Å—è –æ—Ç KOMPAS-3D", 
                              command=self.disconnect_from_kompas)
        file_menu.add_separator()
        file_menu.add_command(label="–í—ã—Ö–æ–¥", command=self.on_closing, accelerator="Alt+F4")
        
        # –ú–µ–Ω—é "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã"
        tools_menu = tk.Menu(menu, tearoff=0)
        menu.add_cascade(label="–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã", menu=tools_menu)
        tools_menu.add_command(label="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª —à–∞–±–ª–æ–Ω–æ–≤", 
                               command=self.edit_templates_file)
        tools_menu.add_command(label="–û–±–Ω–æ–≤–∏—Ç—å —à–∞–±–ª–æ–Ω—ã", 
                               command=self.reload_templates,
                               accelerator="F5")
        tools_menu.add_separator()
        tools_menu.add_command(label="–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤", 
                               command=lambda: self.update_documents_tree(),
                               accelerator="F6")
        # –ú–µ–Ω—é "–ü–æ–º–æ—â—å"
        help_menu = tk.Menu(menu, tearoff=0)
        menu.add_cascade(label="–ü–æ–º–æ—â—å", menu=help_menu)
        help_menu.add_command(label="–û –ø—Ä–æ–≥—Ä–∞–º–º–µ", command=self.show_about)
        help_menu.add_command(label="–ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏", command=self.show_shortcuts)

    def create_toolbar(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
        toolbar_frame = ttk.Frame(parent, style='Toolbar.TFrame')
        toolbar_frame.pack(side=tk.TOP, fill=tk.X)
        
        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –≥—Ä—É–ø–ø
        def add_separator():
            ttk.Separator(toolbar_frame, orient='vertical').pack(side=tk.LEFT, padx=5, fill=tk.Y, pady=2)
        
        # –ì—Ä—É–ø–ø–∞ 1: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ KOMPAS
        # –ö–Ω–æ–ø–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Kompas
        connect_btn = ttk.Button(toolbar_frame, text="üîå", width=3, 
                              command=self.connect_to_kompas)
        connect_btn.pack(side=tk.LEFT, padx=2)
        self.create_tooltip(connect_btn, "–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ KOMPAS-3D (Ctrl+K)")
        
        # –ö–Ω–æ–ø–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –æ—Ç KOMPAS-3D
        disconnect_btn = ttk.Button(toolbar_frame, text="üö´", width=3, 
                                  command=self.disconnect_from_kompas)
        disconnect_btn.pack(side=tk.LEFT, padx=2)
        self.create_tooltip(disconnect_btn, "–û—Ç–∫–ª—é—á–∏—Ç—å—Å—è –æ—Ç KOMPAS-3D")
        
        # –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        check_connect_btn = ttk.Button(toolbar_frame, text="üîç", width=3, 
                                     command=self.check_kompas_connection)
        check_connect_btn.pack(side=tk.LEFT, padx=2)
        self.create_tooltip(check_connect_btn, "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ KOMPAS-3D")
        
        # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        refresh_btn = ttk.Button(toolbar_frame, text="üîÑ", width=3, 
                              command=lambda: self.update_documents_tree())
        refresh_btn.pack(side=tk.LEFT, padx=2)
        self.create_tooltip(refresh_btn, "–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (F6)")
        
        add_separator()
        
        # –ì—Ä—É–ø–ø–∞ 2: –†–∞–±–æ—Ç–∞ —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏
        # –ö–Ω–æ–ø–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
        get_btn = ttk.Button(toolbar_frame, text="üì•", width=3, 
                          command=self.get_technical_requirements)
        get_btn.pack(side=tk.LEFT, padx=2)
        self.create_tooltip(get_btn, "–ü–æ–ª—É—á–∏—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è (Ctrl+G)")
        
        # –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
        save_btn = ttk.Button(toolbar_frame, text="üíæ", width=3, 
                           command=self.save_technical_requirements)
        save_btn.pack(side=tk.LEFT, padx=2)
        self.create_tooltip(save_btn, "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è (Ctrl+S)")
        
        # –ö–Ω–æ–ø–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
        apply_btn = ttk.Button(toolbar_frame, text="üîÑ", width=3, 
                              command=lambda: self.apply_technical_requirements())
        apply_btn.pack(side=tk.LEFT, padx=2)
        self.create_tooltip(apply_btn, "–ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è (Ctrl+E)")
        
        add_separator()
 
        # –ì—Ä—É–ø–ø–∞ 3: –†–∞–±–æ—Ç–∞ —Å —à–∞–±–ª–æ–Ω–∞–º–∏
        # –ö–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤
        edit_templates_btn = ttk.Button(toolbar_frame, text="üìù", width=3, 
                                    command=self.edit_templates_file)
        edit_templates_btn.pack(side=tk.LEFT, padx=2)
        self.create_tooltip(edit_templates_btn, "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª —à–∞–±–ª–æ–Ω–æ–≤")
        
        # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤
        reload_templates_btn = ttk.Button(toolbar_frame, text="üìã", width=3, 
                                      command=self.reload_templates)
        reload_templates_btn.pack(side=tk.LEFT, padx=2)
        self.create_tooltip(reload_templates_btn, "–û–±–Ω–æ–≤–∏—Ç—å —à–∞–±–ª–æ–Ω—ã (F5)")
        
        
        return toolbar_frame
        
    def create_tooltip(self, widget, text):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–π –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –≤–∏–¥–∂–µ—Ç–∞"""
        def enter(event):
            x, y, _, _ = widget.bbox("insert")
            x += widget.winfo_rootx() + 25
            y += widget.winfo_rooty() + 25
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –æ–∫–Ω–∞ –ø–æ–¥—Å–∫–∞–∑–∫–∏
            self.tooltip = tk.Toplevel(widget)
            self.tooltip.wm_overrideredirect(True)
            self.tooltip.wm_geometry(f"+{x}+{y}")
            
            label = ttk.Label(self.tooltip, text=text, background="#ffffe0", 
                           relief="solid", borderwidth=1, padding=(5, 2))
            label.pack()
            
        def leave(event):
            if hasattr(self, 'tooltip'):
                self.tooltip.destroy()
                
        widget.bind("<Enter>", enter)
        widget.bind("<Leave>", leave)
        
    def create_shortcuts(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à"""
        self.root.bind("<Control-k>", lambda event: self.connect_to_kompas())
        self.root.bind("<Control-g>", lambda event: self.get_technical_requirements())
        self.root.bind("<Control-s>", lambda event: self.save_technical_requirements())
        self.root.bind("<Control-e>", lambda event: self.apply_technical_requirements())
        self.root.bind("<F5>", lambda event: self.reload_templates())
        self.root.bind("<F6>", lambda event: self.update_documents_tree())
        self.root.bind("<Control-f>", lambda event: self.focus_search())

    def focus_search(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–æ–∫—É—Å–∞ –Ω–∞ –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞"""
        current_tab = self.template_tabs.index(self.template_tabs.select())
        if current_tab == 0:  # –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–∞ –ø–µ—Ä–≤–∞—è –≤–∫–ª–∞–¥–∫–∞
            self.template_search_entry.focus_set()
        else:
            self.doc_search_entry.focus_set()
            
    def filter_documents_tree(self, *args):
        """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–µ—Ä–µ–≤–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É"""
        search_term = self.doc_search_var.get().lower()
        self.update_documents_tree(search_term)
        
    def filter_templates(self, *args):
        """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —à–∞–±–ª–æ–Ω–æ–≤ –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É"""
        search_term = self.template_search_var.get().lower()
        
        # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫ —Å —É—á–µ—Ç–æ–º –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        self.populate_template_tabs(search_term)
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
        if search_term:
            # –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤
            found_count = 0
            for category, items in self.templates.items():
                for item in items:
                    if search_term in item.lower() or search_term in category.lower():
                        found_count += 1
            
            if found_count == 0:
                self.set_status(f"–ü–æ –∑–∞–ø—Ä–æ—Å—É '{search_term}' —à–∞–±–ª–æ–Ω–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            else:
                self.set_status(f"–ù–∞–π–¥–µ–Ω–æ —à–∞–±–ª–æ–Ω–æ–≤: {found_count} –ø–æ –∑–∞–ø—Ä–æ—Å—É '{search_term}'")
        else:
            self.set_status("–ü–æ–∫–∞–∑–∞–Ω—ã –≤—Å–µ —à–∞–±–ª–æ–Ω—ã")
            
    def show_doc_tree_context_menu(self, event):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –¥–µ—Ä–µ–≤–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
        if self.doc_tree.identify_row(event.y):
            self.doc_tree.selection_set(self.doc_tree.identify_row(event.y))
            self.doc_tree_context_menu.post(event.x_root, event.y_root)
            
    def activate_selected_document(self):
        """–ê–∫—Ç–∏–≤–∞—Ü–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ –¥–µ—Ä–µ–≤–µ"""
        selected = self.doc_tree.selection()
        if not selected:
            self.set_status("–ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
            return False
            
        try:
            if not hasattr(self, 'app7') or not self.app7:
                self.connect_to_kompas()
                if not hasattr(self, 'app7') or not self.app7:
                    return
                    
            # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
            doc_name = self.doc_tree.item(selected[0], 'text')
            
            # –ò—â–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –≤ —Å–ø–∏—Å–∫–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            documents = self.app7.Documents
            for i in range(documents.Count):
                doc = documents.Item(i)
                if doc.Name == doc_name:
                    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
                    doc.Active = True
                    self.update_active_document_info()
                    self.set_status(f"–î–æ–∫—É–º–µ–Ω—Ç {doc_name} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
                    return True
                    
            self.set_status(f"–î–æ–∫—É–º–µ–Ω—Ç {doc_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
            return False
            
        except Exception as e:
            error_message = self.handle_kompas_error(e, "–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
            self.set_status("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
            messagebox.showerror("–û—à–∏–±–∫–∞", error_message)
            return False
            
    def show_document_info(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–µ"""
        selected = self.doc_tree.selection()
        if selected:
            item = selected[0]
            doc_name = self.doc_tree.item(item, "text")
            doc_type = self.doc_tree.item(item, "values")[0]
            doc_path = self.doc_tree.item(item, "values")[1]
            
            info = f"–ò–º—è: {doc_name}\n–¢–∏–ø: {doc_type}\n–ü—É—Ç—å: {doc_path}"
            
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ", info)
            
    def edit_templates_file(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–∞–π–ª–∞ —à–∞–±–ª–æ–Ω–æ–≤ –≤–æ –≤–Ω–µ—à–Ω–µ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ"""
        try:
            if not os.path.exists(self.templates_file):
                self.set_status("–§–∞–π–ª —à–∞–±–ª–æ–Ω–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π")
                with open(self.templates_file, 'w', encoding='utf-8') as f:
                    json.dump({"–û–±—â–∏–µ": []}, f, ensure_ascii=False, indent=4)
                    
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            os.startfile(self.templates_file)
            self.set_status(f"–§–∞–π–ª —à–∞–±–ª–æ–Ω–æ–≤ –æ—Ç–∫—Ä—ã—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {self.templates_file}")
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å —à–∞–±–ª–æ–Ω—ã –ø–æ—Å–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            result = messagebox.askyesno("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤", 
                                       "–ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ —à–∞–±–ª–æ–Ω–æ–≤, "
                                       "—Ö–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –æ–±–Ω–æ–≤–∏—Ç—å —à–∞–±–ª–æ–Ω—ã –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ?")
            if result:
                # –ü–ª–∞–Ω–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤ —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
                self.root.after(1000, self.reload_templates)
                
        except Exception as e:
            self.set_status(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ñ–∞–π–ª–∞ —à–∞–±–ª–æ–Ω–æ–≤: {str(e)}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª —à–∞–±–ª–æ–Ω–æ–≤: {str(e)}")
            
    def reload_templates(self):
        """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            current_search = self.template_search_var.get()
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —à–∞–±–ª–æ–Ω—ã
            self.load_templates()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤–∫–ª–∞–¥–∫–∏ —Å —à–∞–±–ª–æ–Ω–∞–º–∏
            self.populate_template_tabs()
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∏—Å–∫, –µ—Å–ª–∏ –±—ã–ª
            if current_search:
                self.template_search_var.set(current_search)
                self.filter_templates()
                
            self.set_status("–®–∞–±–ª–æ–Ω—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
            
        except Exception as e:
            self.set_status(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —à–∞–±–ª–æ–Ω–æ–≤: {str(e)}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —à–∞–±–ª–æ–Ω—ã: {str(e)}")
            
    def show_about(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ"""
        about_text = """
        –†–µ–¥–∞–∫—Ç–æ—Ä —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –¥–ª—è KOMPAS-3D
        
        –ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –≤—Å—Ç–∞–≤–∫–∏ —Ç–∏–ø–æ–≤—ã—Ö 
        —Ç–µ–∫—Å—Ç–æ–≤ –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è —á–µ—Ä—Ç–µ–∂–µ–π KOMPAS-3D.
        
        2025
        """
        messagebox.showinfo("–û –ø—Ä–æ–≥—Ä–∞–º–º–µ", about_text)
        
    def show_shortcuts(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏"""
        shortcuts_text = """
        –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏:
        Ctrl+K - –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ KOMPAS-3D
        Ctrl+G - –ü–æ–ª—É—á–∏—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
        Ctrl+S - –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
        Ctrl+E - –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
        F5 - –û–±–Ω–æ–≤–∏—Ç—å —à–∞–±–ª–æ–Ω—ã
        F6 - –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        """
        messagebox.showinfo("–ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏", shortcuts_text)
        
    def set_status(self, text):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –≤ —Å—Ç—Ä–æ–∫–µ —Å—Ç–∞—Ç—É—Å–∞"""
        self.status_bar.config(text=text)
        
    def populate_template_tabs(self, search_term=None):
        """–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫ —à–∞–±–ª–æ–Ω–∞–º–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π"""
        # –û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –≤–∫–ª–∞–¥–æ–∫
        for tab in self.template_tabs.tabs():
            self.template_tabs.forget(tab)
            
        # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ "–í—Å–µ" –¥–ª—è –æ–±—â–µ–≥–æ –ø–æ–∏—Å–∫–∞
        all_tab = ttk.Frame(self.template_tabs)
        self.template_tabs.add(all_tab, text="–í—Å–µ")
        
        # –°–æ–∑–¥–∞–µ–º —Ñ—Ä–µ–π–º –¥–ª—è Listbox –∏ —Å–∫—Ä–æ–ª–ª–±–∞—Ä–∞
        all_list_frame = ttk.Frame(all_tab)
        all_list_frame.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        # Listbox –¥–ª—è –≤—Å–µ—Ö —à–∞–±–ª–æ–Ω–æ–≤ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ
        all_listbox = tk.Listbox(all_list_frame, font=('Segoe UI', 10), activestyle='dotbox', 
                                 selectbackground='#4a6984', selectforeground='white')
        all_listbox.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –¥–ª—è –≤–∫–ª–∞–¥–∫–∏ "–í—Å–µ"
        all_scrollbar = ttk.Scrollbar(all_list_frame, orient="vertical", command=all_listbox.yview)
        all_listbox.configure(yscrollcommand=all_scrollbar.set)
        all_scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ —à–∞–±–ª–æ–Ω–∞ —Å –æ–±—â–µ–π –≤–∫–ª–∞–¥–∫–∏
        all_listbox.bind("<Double-1>", lambda event, lb=all_listbox: 
                        self.insert_template(lb.get(lb.curselection()) if lb.curselection() else ""))
        
        # –°—á–µ—Ç—á–∏–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤
        found_count = 0
            
        # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —à–∞–±–ª–æ–Ω–æ–≤
        for category, templates in self.templates.items():
            tab = ttk.Frame(self.template_tabs)
            self.template_tabs.add(tab, text=category)
            
            # –°–æ–∑–¥–∞–µ–º —Ñ—Ä–µ–π–º –¥–ª—è Listbox –∏ —Å–∫—Ä–æ–ª–ª–±–∞—Ä–∞
            list_frame = ttk.Frame(tab)
            list_frame.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Listbox –¥–ª—è —à–∞–±–ª–æ–Ω–æ–≤
            templates_listbox = tk.Listbox(list_frame, font=('Segoe UI', 10), activestyle='dotbox', 
                                          selectbackground='#4a6984', selectforeground='white')
            templates_listbox.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
            scrollbar = ttk.Scrollbar(list_frame, orient="vertical", command=templates_listbox.yview)
            templates_listbox.configure(yscrollcommand=scrollbar.set)
            scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
            
            # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ Listbox —à–∞–±–ª–æ–Ω–∞–º–∏ —Å —É—á–µ—Ç–æ–º –ø–æ–∏—Å–∫–∞
            category_found_count = 0
            if search_term is None or not search_term:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —à–∞–±–ª–æ–Ω—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –µ—Å–ª–∏ –Ω–µ—Ç –ø–æ–∏—Å–∫–∞
                for template in templates:
                    templates_listbox.insert(tk.END, template)
                    category_found_count += 1
            else:
                # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–æ–∏—Å–∫—É
                for template in templates:
                    if search_term in template.lower() or search_term in category.lower():
                        templates_listbox.insert(tk.END, template)
                        # –î–æ–±–∞–≤–ª—è–µ–º —à–∞–±–ª–æ–Ω –∏ –≤–æ –≤–∫–ª–∞–¥–∫—É "–í—Å–µ"
                        all_listbox.insert(tk.END, f"[{category}] {template}")
                        category_found_count += 1
                        found_count += 1
            
            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
            templates_listbox.bind("<Double-1>", lambda event, lb=templates_listbox: 
                                 self.insert_template(lb.get(lb.curselection()) if lb.curselection() else ""))
            
        # –ï—Å–ª–∏ –∏–¥–µ—Ç –ø–æ–∏—Å–∫, –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤–∫–ª–∞–¥–∫—É "–í—Å–µ"
        if search_term is not None and search_term:
            self.template_tabs.select(0)  # –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—É—é –≤–∫–ª–∞–¥–∫—É ("–í—Å–µ")
            
    def update_active_document_info(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫—Ç–∏–≤–Ω–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–µ"""
        try:
            if not hasattr(self, 'app7') or not self.app7:
                self.connect_status.config(text="üî¥ –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", foreground='red')
                self.active_doc_label.config(text="–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
                self.set_status("–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ KOMPAS-3D")
                return
                
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
            active_doc = self.app7.ActiveDocument
            
            if active_doc:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
                    doc_name = active_doc.Name
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞
                    doc_type = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø"
                    try:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç —á–µ—Ä—Ç–µ–∂–æ–º
                        doc2D_s = active_doc._oleobj_.QueryInterface(self.module7.NamesToIIDMap['IDrawingDocument'], 
                                                                  pythoncom.IID_IDispatch)
                        doc_type = "–ß–µ—Ä—Ç–µ–∂"
                    except:
                        try:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç 3D-–º–æ–¥–µ–ª—å—é
                            doc3D_s = active_doc._oleobj_.QueryInterface(self.module7.NamesToIIDMap['IDocument3D'], 
                                                                      pythoncom.IID_IDispatch)
                            doc_type = "3D-–º–æ–¥–µ–ª—å"
                        except:
                            try:
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
                                spec_s = active_doc._oleobj_.QueryInterface(self.module7.NamesToIIDMap['ISpecificationDocument'], 
                                                                         pythoncom.IID_IDispatch)
                                doc_type = "–°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è"
                            except:
                                pass
                    
                    # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –¥–æ–∫—É–º–µ–Ω—Ç—É
                    doc_path = active_doc.Path
                    if doc_path:
                        doc_path = os.path.join(doc_path, doc_name)
                    else:
                        doc_path = "–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω"
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
                    self.active_doc_label.config(text=f"–î–æ–∫—É–º–µ–Ω—Ç: {doc_name} ({doc_type})")
                    self.connect_status.config(text="üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ", foreground='green')
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å—Ç–∞—Ç—É—Å–∞
                    self.set_status(f"–ê–∫—Ç–∏–≤–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç: {doc_name} ({doc_type}) - {doc_path}")
                    
                    # –í—ã–¥–µ–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –≤ –¥–µ—Ä–µ–≤–µ
                    self.select_document_in_tree(active_doc)
                    
                except Exception as e:
                    self.set_status(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ: {str(e)}")
                    self.active_doc_label.config(text="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ")
            else:
                self.active_doc_label.config(text="–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
                self.set_status("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ KOMPAS-3D")
                
        except Exception as e:
            self.set_status(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ: {str(e)}")
            self.active_doc_label.config(text="–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
            
    def on_document_double_click(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–µ –≤ –¥–µ—Ä–µ–≤–µ"""
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
        item_id = self.doc_tree.identify('item', event.x, event.y)
        if not item_id:
            return
            
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ
        doc_type = self.doc_tree.item(item_id, "values")[0]
        
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
        self.activate_selected_document()
        
        # –ï—Å–ª–∏ —ç—Ç–æ —á–µ—Ä—Ç–µ–∂, –∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
        if doc_type == "–ß–µ—Ä—Ç–µ–∂":
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞
            self.root.after(500, self.get_technical_requirements)
            self.set_status("–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π...")
            
    def insert_template(self, template_text):
        """–í—Å—Ç–∞–≤–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ"""
        if template_text:
            # –£–¥–∞–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–∫–∞—Ö, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
            if template_text.startswith('['):
                template_text = template_text[template_text.find(']') + 1:].strip()
                
            cursor_pos = self.current_reqs_text.index(tk.INSERT)
            self.current_reqs_text.insert(cursor_pos, template_text + "\n")
            self.set_status(f"–í—Å—Ç–∞–≤–ª–µ–Ω —à–∞–±–ª–æ–Ω: {template_text[:30]}...")
            
    def get_technical_requirements(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∏–∑ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        try:
            if not hasattr(self, 'module7') or not self.module7:
                self.connect_to_kompas()
                if not hasattr(self, 'module7') or not self.module7:
                    return
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
            active_doc = self.app7.ActiveDocument
            if not active_doc:
                self.set_status("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
                messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ –ö–û–ú–ü–ê–°-3D")
                return
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç —á–µ—Ä—Ç–µ–∂–æ–º
            try:
                # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å IDrawingDocument
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —á–µ—Ä—Ç–µ–∂–∞
                    drawing_document = self.module7.IDrawingDocument(active_doc)
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
                    tech_demand = drawing_document.TechnicalDemand
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–∑–¥–∞–Ω—ã –ª–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
                    if not tech_demand.IsCreated:
                        self.set_status("–í –¥–æ–∫—É–º–µ–Ω—Ç–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è!")
                        messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–í –¥–æ–∫—É–º–µ–Ω—Ç–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è!")
                        return
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
                    text = tech_demand.Text
                    
                    # –ï—Å–ª–∏ –Ω–µ—Ç —Å—Ç—Ä–æ–∫, –≤—ã–¥–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
                    if text.Count == 0:
                        self.set_status("–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –ø—É—Å—Ç—ã!")
                        messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –µ—Å—Ç—å, –Ω–æ –æ–Ω–∏ –ø—É—Å—Ç—ã!")
                        return
                    
                    # –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä
                    formatted_text = self.parse_tech_req(text)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ
                    self.current_reqs_text.delete(1.0, tk.END)
                    self.current_reqs_text.insert(tk.END, formatted_text)
                    
                    doc_name = active_doc.Name
                    self.set_status(f"–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ {doc_name}")
                    return
                except Exception as e:
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ –ø–µ—Ä–≤—ã–π –º–µ—Ç–æ–¥, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π
                    self.set_status("–ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ—Ö. —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π...")
                    print(f"Exception in method 1: {str(e)}")
                
                # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ —á–µ—Ä–µ–∑ ActiveDocument2D
                kompas_doc2D = self.app7.ActiveDocument2D()
                if kompas_doc2D:
                    tech_req = kompas_doc2D.TechnicalDemand()
                    if tech_req:
                        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ (–µ—Å–ª–∏ —Ç–∞–∫–æ–π –º–µ—Ç–æ–¥ –µ—Å—Ç—å)
                        if hasattr(tech_req, 'Count'):
                            count = tech_req.Count()
                            
                            # –ï—Å–ª–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –ø—É—Å—Ç—ã–µ
                            if count == 0:
                                self.set_status("–í –¥–æ–∫—É–º–µ–Ω—Ç–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è!")
                                messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–í –¥–æ–∫—É–º–µ–Ω—Ç–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è!")
                                return
                            
                            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –≤ —á–∏—Å—Ç–æ–º –≤–∏–¥–µ
                            text = ""
                            for i in range(count):
                                line_text = tech_req.GetLine(i)
                                text += line_text + "\n"
                        else:
                            # –î–ª—è API, –Ω–µ –∏–º–µ—é—â–µ–≥–æ –º–µ—Ç–æ–¥–∞ Count
                            self.set_status("–ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ—Ö. —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π")
                            try:
                                # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞–ø—Ä—è–º—É—é –∏–∑ —Å–≤–æ–π—Å—Ç–≤–∞ Text
                                text_obj = tech_req.Text
                                
                                text = ""
                                for i in range(text_obj.Count):
                                    line = text_obj.TextLines[i]
                                    text += line.Str + "\n"
                            except Exception as e2:
                                self.set_status(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π: {str(e2)}")
                                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π: {str(e2)}")
                                return
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ
                        self.current_reqs_text.delete(1.0, tk.END)
                        self.current_reqs_text.insert(tk.END, text)
                        
                        doc_name = active_doc.Name
                        self.set_status(f"–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ {doc_name} (–º–µ—Ç–æ–¥ 2)")
                        return
                
            except Exception as e:
                error_message = self.handle_kompas_error(e, "–ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π")
                self.set_status("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ—Ö. —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π")
                messagebox.showerror("–û—à–∏–±–∫–∞", error_message)
                print(f"Exception details: {str(e)}")
                
        except Exception as e:
            error_message = self.handle_kompas_error(e, "—Ä–∞–±–æ—Ç—ã —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º")
            self.set_status("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º")
            messagebox.showerror("–û—à–∏–±–∫–∞", error_message)
            print(f"Exception details: {str(e)}")
            
    def save_technical_requirements(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –≤ –∞–∫—Ç–∏–≤–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π –º–µ—Ç–æ–¥ —Å —Ñ–ª–∞–≥–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
        self.apply_technical_requirements(save_document=True)
            
    def apply_technical_requirements(self, save_document=False):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∫ –∞–∫—Ç–∏–≤–Ω–æ–º—É –¥–æ–∫—É–º–µ–Ω—Ç—É –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞"""
        try:
            if not hasattr(self, 'module7') or not self.module7:
                self.connect_to_kompas()
                if not hasattr(self, 'module7') or not self.module7:
                    return
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
            active_doc = self.app7.ActiveDocument
            if not active_doc:
                self.set_status("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
                messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ –ö–û–ú–ü–ê–°-3D")
                return
                
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
            text_content = self.current_reqs_text.get(1.0, tk.END).strip()
            
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —á–µ—Ä—Ç–µ–∂–∞
                drawing_document = self.module7.IDrawingDocument(active_doc)
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
                tech_demand = drawing_document.TechnicalDemand
                
                # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –ø—É—Å—Ç–æ–π, –æ—á–∏—â–∞–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏ –≤—ã—Ö–æ–¥–∏–º
                if not text_content:
                    # –ï—Å–ª–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è —É–∂–µ —Å–æ–∑–¥–∞–Ω—ã, –æ—á–∏—â–∞–µ–º –∏—Ö
                    if tech_demand.IsCreated:
                        text_obj = tech_demand.Text
                        while text_obj.Count > 0:
                            # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É –∏ —É–¥–∞–ª—è–µ–º –µ—ë
                            line = text_obj.TextLines[0]
                            line.Delete()
                        
                        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                        if hasattr(tech_demand, 'Update'):
                            tech_demand.Update()
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
                        if hasattr(drawing_document, 'Update'):
                            drawing_document.Update()
                        else:
                            # –ï—Å–ª–∏ –º–µ—Ç–æ–¥–∞ Update –Ω–µ—Ç, –ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å —á–µ—Ä–µ–∑ active_doc
                            if hasattr(active_doc, 'Update'):
                                active_doc.Update()
                        
                        self.set_status("–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –æ—á–∏—â–µ–Ω—ã")
                        return
                    else:
                        # –ï—Å–ª–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –Ω–µ —Å–æ–∑–¥–∞–Ω—ã –∏ —Ç–µ–∫—Å—Ç –ø—É—Å—Ç–æ–π, –ø—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º
                        self.set_status("–ù–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è")
                        return
                
                # –ï—Å–ª–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –Ω–µ —Å–æ–∑–¥–∞–Ω—ã, —Å–æ–∑–¥–∞–µ–º –∏—Ö
                if not tech_demand.IsCreated:
                    tech_demand.Create()
                
                # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
                text_obj = tech_demand.Text
                while text_obj.Count > 0:
                    # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É –∏ —É–¥–∞–ª—è–µ–º –µ—ë
                    line = text_obj.TextLines[0]
                    line.Delete()
                
                # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏
                lines = text_content.split("\n")
                
                # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                lines = [line.strip() for line in lines if line.strip()]
                
                # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –Ω—É–º–µ—Ä–∞—Ü–∏—é –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∏–µ —Å—Ç—Ä–æ–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—Ä–æ–Ω—É–º–µ—Ä–æ–≤–∞–Ω—ã
                cleaned_lines = []
                should_number = []
                
                for i, line in enumerate(lines):
                    # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –Ω—É–º–µ—Ä–∞—Ü–∏—é (–µ—Å–ª–∏ –µ—Å—Ç—å)
                    clean_line = re.sub(r'^\d+\.\s*', '', line)
                    # –£–¥–∞–ª—è–µ–º –æ—Ç—Å—Ç—É–ø—ã –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏
                    clean_line = clean_line.lstrip()
                    cleaned_lines.append(clean_line)
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –¥–æ–ª–∂–Ω–∞ –ª–∏ —Å—Ç—Ä–æ–∫–∞ –∏–º–µ—Ç—å –Ω–æ–º–µ—Ä
                    # –°—Ç—Ä–æ–∫–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å –Ω–æ–º–µ—Ä, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –º–∞–ª–µ–Ω—å–∫–æ–π –±—É–∫–≤—ã –∏–ª–∏ —Å —Ç–∏—Ä–µ/–¥–µ—Ñ–∏—Å–∞
                    # –∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–æ–π
                    if i > 0 and (
                        (len(clean_line) > 0 and clean_line[0].islower()) or 
                        clean_line.startswith('-') or 
                        clean_line.startswith('‚Äì')
                    ):
                        should_number.append(False)
                    else:
                        should_number.append(True)
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –Ω—É–º–µ—Ä–∞—Ü–∏–∏
                for i, (line, should_num) in enumerate(zip(cleaned_lines, should_number)):
                    processed_lines.append((line, should_num))
            except Exception as e:
                self.handle_kompas_error(e, "–æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π")
                return
            else:
                # –ï—Å–ª–∏ –∞–≤—Ç–æ–Ω—É–º–µ—Ä–∞—Ü–∏—è –≤—ã–∫–ª—é—á–µ–Ω–∞, –ø—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç –∫–∞–∫ –µ—Å—Ç—å
                for line in lines:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω—É–º–µ—Ä–∞—Ü–∏—è –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏
                    num_match = re.match(r'^(\d+)\.\s*(.*)', line)
                    if num_match:
                        # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω—É–º–µ—Ä–∞—Ü–∏—è, –∏–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω—É–º–µ—Ä–∞—Ü–∏–∏
                        req_text = num_match.group(2).strip()
                        processed_lines.append((req_text, True))
                    else:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—Ç—Å—Ç—É–ø –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏ (–¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø—É–Ω–∫—Ç–∞)
                        indent_match = re.match(r'^\s+(.+)', line)
                        if indent_match:
                            # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Ç—Å—Ç—É–ø, —ç—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ø—É–Ω–∫—Ç–∞
                            req_text = indent_match.group(1).strip()
                            processed_lines.append((req_text, False))
                        else:
                            # –ï—Å–ª–∏ –Ω–µ—Ç –Ω—É–º–µ—Ä–∞—Ü–∏–∏ –∏ –æ—Ç—Å—Ç—É–ø–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –∫–∞–∫ –µ—Å—Ç—å
                            processed_lines.append((line, True))  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–æ–≤—ã–π –ø—É–Ω–∫—Ç
                
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è KOMPAS-3D
            for i, (line_text, is_numbered) in enumerate(processed_lines):
                try:
                    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É
                    text_line = text_obj.Add()
                    text_line.Str = line_text
                    
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–º–µ—Ä–∞—Ü–∏—é
                    if is_numbered:
                        text_line.Numbering = 1
                    else:
                        text_line.Numbering = 0
                        
                except Exception as line_error:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç—Ä–æ–∫–∏ '{line_text}': {str(line_error)}")
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–æ–∫–æ–π
                
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            if hasattr(tech_demand, 'Update'):
                tech_demand.Update()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
            if hasattr(drawing_document, 'Update'):
                drawing_document.Update()
            else:
                # –ï—Å–ª–∏ –º–µ—Ç–æ–¥–∞ Update –Ω–µ—Ç, –ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å —á–µ—Ä–µ–∑ active_doc
                if hasattr(active_doc, 'Update'):
                    active_doc.Update()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if save_document:
                try:
                    active_doc.Save()
                    self.set_status("–î–æ–∫—É–º–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
                except Exception as e:
                    error_msg = self.handle_kompas_error(e, "—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞")
                    self.set_status("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
            
            doc_name = active_doc.Name
            self.set_status(f"–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –∫ {doc_name}" + 
                          (" –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã" if save_document else " (–±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞)"))
            
            if save_document:
                messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", f"–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {doc_name}")
            else:
                messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", f"–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –∫ {doc_name} (–±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞)")
                
        except Exception as e:
            error_message = self.handle_kompas_error(e, "–ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π")
            self.set_status("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ —Ç–µ—Ö. —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π")
            messagebox.showerror("–û—à–∏–±–∫–∞", error_message)
            print(f"Exception details: {str(e)}")
            
    def select_document_in_tree(self, document):
        """–í—ã–±–æ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ –¥–µ—Ä–µ–≤–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
        try:
            if not document:
                return
                
            doc_name = document.Name
            
            # –ò—â–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –≤ –¥–µ—Ä–µ–≤–µ
            for item in self.doc_tree.get_children():
                if self.doc_tree.item(item, 'text') == doc_name:
                    # –í—ã–¥–µ–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
                    self.doc_tree.selection_set(item)
                    self.doc_tree.see(item)
                    return
                    
            # –ï—Å–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–µ—Ä–µ–≤–µ, –æ–±–Ω–æ–≤–ª—è–µ–º –¥–µ—Ä–µ–≤–æ
            self.update_documents_tree()
            
            # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç —Å–Ω–æ–≤–∞
            for item in self.doc_tree.get_children():
                if self.doc_tree.item(item, 'text') == doc_name:
                    self.doc_tree.selection_set(item)
                    self.doc_tree.see(item)
                    return
                    
        except Exception as e:
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ –¥–µ—Ä–µ–≤–µ
            pass
            
    def update_documents_tree(self, search_term=None):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–µ—Ä–µ–≤–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
        try:
            if not hasattr(self, 'app7') or not self.app7:
                self.set_status("–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ KOMPAS-3D")
                return
                
            # –û—á–∏—Å—Ç–∫–∞ –¥–µ—Ä–µ–≤–∞
            for item in self.doc_tree.get_children():
                self.doc_tree.delete(item)
                
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            documents = self.app7.Documents
            doc_count = 0
            
            # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ—Ä–µ–≤–∞
            for i in range(documents.Count):
                doc = documents.Item(i)
                doc_name = doc.Name
                
                # –ï—Å–ª–∏ –∑–∞–¥–∞–Ω –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å, —Ñ–∏–ª—å—Ç—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã
                if search_term and search_term.lower() not in doc_name.lower():
                    continue
                    
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞
                doc_type = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø"
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç —á–µ—Ä—Ç–µ–∂–æ–º
                    doc2D_s = doc._oleobj_.QueryInterface(self.module7.NamesToIIDMap['IDrawingDocument'], 
                                                       pythoncom.IID_IDispatch)
                    doc_type = "–ß–µ—Ä—Ç–µ–∂"
                except:
                    try:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç 3D-–º–æ–¥–µ–ª—å—é
                        doc3D_s = doc._oleobj_.QueryInterface(self.module7.NamesToIIDMap['IDocument3D'], 
                                                           pythoncom.IID_IDispatch)
                        doc_type = "3D-–º–æ–¥–µ–ª—å"
                    except:
                        try:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
                            spec_s = doc._oleobj_.QueryInterface(self.module7.NamesToIIDMap['ISpecificationDocument'], 
                                                              pythoncom.IID_IDispatch)
                            doc_type = "–°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è"
                        except:
                            pass
                
                # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –¥–æ–∫—É–º–µ–Ω—Ç—É
                doc_path = doc.Path
                if not doc_path:
                    doc_path = "–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –≤ –¥–µ—Ä–µ–≤–æ
                item_id = self.doc_tree.insert("", "end", text=doc_name, 
                                             values=(doc_type, doc_path))
                
                # –ï—Å–ª–∏ —ç—Ç–æ –∞–∫—Ç–∏–≤–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç, –≤—ã–¥–µ–ª—è–µ–º –µ–≥–æ
                if self.app7.ActiveDocument and doc.Name == self.app7.ActiveDocument.Name:
                    self.doc_tree.selection_set(item_id)
                    self.doc_tree.see(item_id)
                
                doc_count += 1
                
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            self.set_status(f"–ù–∞–π–¥–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {doc_count}")
            self.docs_count_label.config(text=f"–î–æ–∫—É–º–µ–Ω—Ç–æ–≤: {doc_count}")
            
        except Exception as e:
            self.set_status(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–µ—Ä–µ–≤–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {str(e)}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–µ—Ä–µ–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {str(e)}")
            
    def periodic_update(self):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ KOMPAS-3D
            if self.is_kompas_running():
                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫—Ç–∏–≤–Ω–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–µ
                self.update_active_document_info()
            else:
                # –ï—Å–ª–∏ KOMPAS-3D –Ω–µ –∑–∞–ø—É—â–µ–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                self.connect_status.config(text="üî¥ –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", foreground='red')
                self.active_doc_label.config(text="–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
        except Exception as e:
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
            pass
            
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        self.root.after(5000, self.periodic_update)

    def format_text(self, format_type):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
        try:
            current_selection = self.current_reqs_text.tag_ranges(tk.SEL)
            if not current_selection:
                self.set_status("–ù–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
                return
                
            start, end = current_selection
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–æ—Ä–º–∞—Ç —É–∂–µ
            existing_tags = self.current_reqs_text.tag_names(start)
            
            if format_type in existing_tags:
                # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç —É–∂–µ –µ—Å—Ç—å - —É–¥–∞–ª—è–µ–º –µ–≥–æ
                self.current_reqs_text.tag_remove(format_type, start, end)
                self.set_status(f"–§–æ—Ä–º–∞—Ç '{format_type}' —É–¥–∞–ª–µ–Ω")
            else:
                # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
                self.current_reqs_text.tag_add(format_type, start, end)
                self.set_status(f"–ü—Ä–∏–º–µ–Ω–µ–Ω —Ñ–æ—Ä–º–∞—Ç '{format_type}'")
                
        except Exception as e:
            self.set_status(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞: {str(e)}")
            
    def create_new_document(self, doc_type="drawing"):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ KOMPAS-3D"""
        try:
            if not hasattr(self, 'app7') or not self.app7:
                self.connect_to_kompas()
                if not hasattr(self, 'app7') or not self.app7:
                    return
                    
            if doc_type == "drawing":
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —á–µ—Ä—Ç–µ–∂
                doc = self.app7.Document2D()
                doc.Create(False, True)  # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –±–µ–∑ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∏ —Å –Ω–æ–≤—ã–º –æ–∫–Ω–æ–º
                doc_type_name = "—á–µ—Ä—Ç–µ–∂"
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é 3D-–º–æ–¥–µ–ª—å
                doc = self.app7.Document3D()
                doc.Create(False, True)  # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –±–µ–∑ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∏ —Å –Ω–æ–≤—ã–º –æ–∫–Ω–æ–º
                doc_type_name = "3D-–º–æ–¥–µ–ª—å"
            
            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
            doc.Active = True
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            self.update_active_document_info()
            self.update_documents_tree()
            
            self.set_status(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç: {doc_type_name}")
            
        except Exception as e:
            error_message = self.handle_kompas_error(e, "—Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
            self.set_status(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
            messagebox.showerror("–û—à–∏–±–∫–∞", error_message)
            
    def show_new_document_dialog(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –Ω–æ–≤–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        dialog = tk.Toplevel(self.root)
        dialog.title("–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
        dialog.geometry("300x150")
        dialog.resizable(False, False)
        dialog.transient(self.root)
        dialog.grab_set()
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞
        dialog.update_idletasks()
        width = dialog.winfo_width()
        height = dialog.winfo_height()
        x = (dialog.winfo_screenwidth() // 2) - (width // 2)
        y = (dialog.winfo_screenheight() // 2) - (height // 2)
        dialog.geometry('{}x{}+{}+{}'.format(width, height, x, y))
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        tk.Label(dialog, text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞:", font=("Arial", 12)).pack(pady=10)
        
        # –ö–Ω–æ–ø–∫–∏
        button_frame = tk.Frame(dialog)
        button_frame.pack(pady=10)
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —á–µ—Ä—Ç–µ–∂–∞
        drawing_btn = ttk.Button(button_frame, text="–ß–µ—Ä—Ç–µ–∂", width=15, 
                              command=lambda: [dialog.destroy(), self.create_new_document("drawing")])
        drawing_btn.pack(side=tk.LEFT, padx=5)
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è 3D-–º–æ–¥–µ–ª–∏
        model_btn = ttk.Button(button_frame, text="3D-–º–æ–¥–µ–ª—å", width=15, 
                            command=lambda: [dialog.destroy(), self.create_new_document("3d")])
        model_btn.pack(side=tk.LEFT, padx=5)
        
        # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
        cancel_btn = ttk.Button(dialog, text="–û—Ç–º–µ–Ω–∞", width=15, 
                             command=dialog.destroy)
        cancel_btn.pack(pady=10)
        
    def disconnect_from_kompas(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç KOMPAS-3D"""
        try:
            if hasattr(self, 'app7') and self.app7:
                # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º COM-–æ–±—ä–µ–∫—Ç—ã
                self.app7 = None
                self.module7 = None
                self.api7 = None
                self.const7 = None
                
                # –í—ã–∑—ã–≤–∞–µ–º —Å–±–æ—Ä—â–∏–∫ –º—É—Å–æ—Ä–∞ –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è COM-–æ–±—ä–µ–∫—Ç–æ–≤
                gc.collect()
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                self.connect_status.config(text="üî¥ –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", foreground='red')
                self.set_status("–û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç KOMPAS-3D")
                
                # –û—á–∏—â–∞–µ–º –¥–µ—Ä–µ–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
                for item in self.doc_tree.get_children():
                    self.doc_tree.delete(item)
                    
                return True
            else:
                self.set_status("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ KOMPAS-3D")
                return False
                
        except Exception as e:
            self.set_status(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –æ—Ç KOMPAS-3D: {str(e)}")
            return False
            
    def on_closing(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            # –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç KOMPAS-3D
            if hasattr(self, 'app7') and self.app7:
                self.disconnect_from_kompas()
                
            # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º COM
            pythoncom.CoUninitialize()
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            self.root.destroy()
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {str(e)}")
            self.root.destroy()
            
    def handle_kompas_error(self, e, operation="–æ–ø–µ—Ä–∞—Ü–∏–∏"):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å KOMPAS-3D"""
        error_msg = str(e)
        error_code = None
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–¥ –æ—à–∏–±–∫–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if "0x" in error_msg:
            try:
                # –ò—â–µ–º —à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–µ—Ä–∏—á–Ω—ã–π –∫–æ–¥ –æ—à–∏–±–∫–∏
                match = re.search(r'0x[0-9A-Fa-f]+', error_msg)
                if match:
                    error_code = match.group(0)
            except:
                pass
                
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        if error_code:
            message = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ {operation} –≤ KOMPAS-3D.\n\n–ö–æ–¥ –æ—à–∏–±–∫–∏: {error_code}"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –æ—à–∏–±–æ–∫
            if error_code == "0x80004005":
                message += "\n\n–ù–µ—É–∫–∞–∑–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–±–ª–µ–º–∞ —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ –æ–±—ä–µ–∫—Ç—É."
            elif error_code == "0x80020009":
                message += "\n\n–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ KOMPAS-3D. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞."
            elif error_code == "0x8002000A":
                message += "\n\n–ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –∏–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä."
            elif error_code == "0x80020006":
                message += "\n\n–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∏–º—è –∏–ª–∏ –º–µ—Ç–æ–¥."
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            message += "\n\n–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n"
            message += "1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ KOMPAS-3D –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.\n"
            message += "2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä–∞–≤–∞ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞.\n"
            message += "3. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ KOMPAS-3D."
            
        else:
            message = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ {operation} –≤ KOMPAS-3D.\n\n{error_msg}"
            
        # –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å—Ç–∞—Ç—É—Å–Ω—É—é —Å—Ç—Ä–æ–∫—É
        self.set_status(f"–û—à–∏–±–∫–∞: {error_msg}")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥–∏–∞–ª–æ–≥–∞—Ö
        return message
        
    def apply_list_formatting(self, tech_req):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–∏—Å–∫–æ–º –∫ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º"""
        try:
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–µ—Ä—Å–∏–∏ API
            if hasattr(tech_req, 'FormatAsList'):
                tech_req.FormatAsList()
                # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–ø–∏—Å–∫–∞
                if hasattr(tech_req, 'ListParams'):
                    tech_req.ListParams = True
                # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∏–ø–∞ —Å–ø–∏—Å–∫–∞ (–Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π)
                if hasattr(tech_req, 'ListType'):
                    tech_req.ListType = 0  # 0 - –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
                # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω—É–º–µ—Ä–∞—Ü–∏—é
                self.apply_numbering(tech_req)
                self.set_status("–ü—Ä–∏–º–µ–Ω–µ–Ω–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–æ–º –∏ –Ω—É–º–µ—Ä–∞—Ü–∏—è (–º–µ—Ç–æ–¥ 1)")
                return True
            elif hasattr(tech_req, 'Text') and hasattr(tech_req.Text, 'FormatAsList'):
                tech_req.Text.FormatAsList()
                # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–ø–∏—Å–∫–∞
                if hasattr(tech_req.Text, 'ListParams'):
                    tech_req.Text.ListParams = True
                # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∏–ø–∞ —Å–ø–∏—Å–∫–∞ (–Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π)
                if hasattr(tech_req.Text, 'ListType'):
                    tech_req.Text.ListType = 0  # 0 - –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
                # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω—É–º–µ—Ä–∞—Ü–∏—é
                self.apply_numbering(tech_req)
                self.set_status("–ü—Ä–∏–º–µ–Ω–µ–Ω–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–æ–º –∏ –Ω—É–º–µ—Ä–∞—Ü–∏—è (–º–µ—Ç–æ–¥ 2)")
                return True
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä—è–º–æ–≥–æ –º–µ—Ç–æ–¥–∞, –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å IText
                try:
                    text_obj = tech_req.Text
                    
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–ø–∏—Å–∫–∞ –¥–ª—è –≤—Å–µ–≥–æ —Ç–µ–∫—Å—Ç–∞
                    if hasattr(text_obj, 'ListParams'):
                        text_obj.ListParams = True
                    
                    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∏–ø–∞ —Å–ø–∏—Å–∫–∞ –¥–ª—è –≤—Å–µ–≥–æ —Ç–µ–∫—Å—Ç–∞ (–Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π)
                    if hasattr(text_obj, 'ListType'):
                        text_obj.ListType = 0  # 0 - –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
                    
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∏–ª—å —Å–ø–∏—Å–∫–∞ –¥–ª—è –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫
                    for i in range(text_obj.Count):
                        line = text_obj.TextLines[i]
                        if hasattr(line, 'ListStyle'):
                            line.ListStyle = True
                        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–ø–∏—Å–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏
                        if hasattr(line, 'ListParams'):
                            line.ListParams = True
                        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∏–ø–∞ —Å–ø–∏—Å–∫–∞ (–Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π)
                        if hasattr(line, 'ListType'):
                            line.ListType = 0  # 0 - –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
                    
                    # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω—É–º–µ—Ä–∞—Ü–∏—é
                    self.apply_numbering(tech_req)
                    self.set_status("–ü—Ä–∏–º–µ–Ω–µ–Ω–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–æ–º –∏ –Ω—É–º–µ—Ä–∞—Ü–∏—è (–º–µ—Ç–æ–¥ 3)")
                    return True
                except Exception as e:
                    self.set_status(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–æ–º: {str(e)}")
                    return False
                    
        except Exception as e:
            self.set_status(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–ø–∏—Å–∫–æ–º: {str(e)}")
            return False
            
    def apply_numbering(self, tech_req):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω—É–º–µ—Ä–∞—Ü–∏–∏ –∫ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º —Å—Ä–µ–¥—Å—Ç–≤–∞–º–∏ API KOMPAS"""
        try:
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω—É–º–µ—Ä–∞—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–µ—Ä—Å–∏–∏ API
            if hasattr(tech_req, 'SetNumbering'):
                # –ú–µ—Ç–æ–¥ 1: –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ SetNumbering
                tech_req.SetNumbering()
                # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–ø–∏—Å–∫–∞
                if hasattr(tech_req, 'ListParams'):
                    tech_req.ListParams = True
                # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∏–ø–∞ —Å–ø–∏—Å–∫–∞ (–Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π)
                if hasattr(tech_req, 'ListType'):
                    tech_req.ListType = 0  # 0 - –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
                # –í–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –Ω—É–º–µ—Ä–∞—Ü–∏–∏
                if hasattr(tech_req, 'AutoNumbering'):
                    tech_req.AutoNumbering = True
                self.set_status("–ü—Ä–∏–º–µ–Ω–µ–Ω–∞ –Ω—É–º–µ—Ä–∞—Ü–∏—è (–º–µ—Ç–æ–¥ 1)")
                return True
            elif hasattr(tech_req, 'Text') and hasattr(tech_req.Text, 'SetNumbering'):
                # –ú–µ—Ç–æ–¥ 2: –í—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ SetNumbering —É –æ–±—ä–µ–∫—Ç–∞ Text
                tech_req.Text.SetNumbering()
                # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–ø–∏—Å–∫–∞
                if hasattr(tech_req.Text, 'ListParams'):
                    tech_req.Text.ListParams = True
                # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∏–ø–∞ —Å–ø–∏—Å–∫–∞ (–Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π)
                if hasattr(tech_req.Text, 'ListType'):
                    tech_req.Text.ListType = 0  # 0 - –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
                # –í–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –Ω—É–º–µ—Ä–∞—Ü–∏–∏
                if hasattr(tech_req.Text, 'AutoNumbering'):
                    tech_req.Text.AutoNumbering = True
                self.set_status("–ü—Ä–∏–º–µ–Ω–µ–Ω–∞ –Ω—É–º–µ—Ä–∞—Ü–∏—è (–º–µ—Ç–æ–¥ 2)")
                return True
            elif hasattr(tech_req, 'Text') and hasattr(tech_req.Text, 'NumberingStyle'):
                # –ú–µ—Ç–æ–¥ 3: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–≤–æ–π—Å—Ç–≤–∞ NumberingStyle
                tech_req.Text.NumberingStyle = True
                # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–ø–∏—Å–∫–∞
                if hasattr(tech_req.Text, 'ListParams'):
                    tech_req.Text.ListParams = True
                # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∏–ø–∞ —Å–ø–∏—Å–∫–∞ (–Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π)
                if hasattr(tech_req.Text, 'ListType'):
                    tech_req.Text.ListType = 0  # 0 - –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
                # –í–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –Ω—É–º–µ—Ä–∞—Ü–∏–∏
                if hasattr(tech_req.Text, 'AutoNumbering'):
                    tech_req.Text.AutoNumbering = True
                self.set_status("–ü—Ä–∏–º–µ–Ω–µ–Ω–∞ –Ω—É–º–µ—Ä–∞—Ü–∏—è (–º–µ—Ç–æ–¥ 3)")
                return True
            else:
                # –ú–µ—Ç–æ–¥ 4: –ü—Ä–æ–±—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω—É–º–µ—Ä–∞—Ü–∏—é –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏
                try:
                    text_obj = tech_req.Text
                    
                    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–ø–∏—Å–∫–∞ –¥–ª—è –≤—Å–µ–≥–æ —Ç–µ–∫—Å—Ç–∞
                    if hasattr(text_obj, 'ListParams'):
                        text_obj.ListParams = True
                    
                    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∏–ø–∞ —Å–ø–∏—Å–∫–∞ –¥–ª—è –≤—Å–µ–≥–æ —Ç–µ–∫—Å—Ç–∞ (–Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π)
                    if hasattr(text_obj, 'ListType'):
                        text_obj.ListType = 0  # 0 - –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
                    
                    # –í–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –Ω—É–º–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –≤—Å–µ–≥–æ —Ç–µ–∫—Å—Ç–∞
                    if hasattr(text_obj, 'AutoNumbering'):
                        text_obj.AutoNumbering = True
                    
                    # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω—É–º–µ—Ä–∞—Ü–∏—é –∫ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ
                    for i in range(text_obj.Count):
                        line = text_obj.TextLines[i]
                        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∏–ª—è –Ω—É–º–µ—Ä–∞—Ü–∏–∏
                        if hasattr(line, 'NumberingStyle'):
                            line.NumberingStyle = True
                        elif hasattr(line, 'Numbering'):
                            line.Numbering = True
                            
                        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–ø–∏—Å–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏
                        if hasattr(line, 'ListParams'):
                            line.ListParams = True
                            
                        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∏–ø–∞ —Å–ø–∏—Å–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏ (–Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π)
                        if hasattr(line, 'ListType'):
                            line.ListType = 0  # 0 - –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
                    
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–ø–∏—Å–∫–∞ –¥–ª—è –≤—Å–µ–≥–æ —Ç–µ–∫—Å—Ç–∞
                    if hasattr(text_obj, 'ListParams'):
                        text_obj.ListParams = True
                        
                    self.set_status("–ü—Ä–∏–º–µ–Ω–µ–Ω–∞ –Ω—É–º–µ—Ä–∞—Ü–∏—è (–º–µ—Ç–æ–¥ 4)")
                    return True
                except Exception as e:
                    self.set_status(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –Ω—É–º–µ—Ä–∞—Ü–∏—é: {str(e)}")
                    return False
        except Exception as e:
            self.set_status(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –Ω—É–º–µ—Ä–∞—Ü–∏–∏: {str(e)}")
            return False
            
    def apply_numbering(self):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –Ω—É–º–µ—Ä–∞—Ü–∏–∏ –∫ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
            text_content = self.current_reqs_text.get(1.0, tk.END).strip()
            
            if not text_content:
                messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –Ω—É–º–µ—Ä–∞—Ü–∏–∏")
                return
                
            # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏
            lines = text_content.split("\n")
            
            # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
            lines = [line.strip() for line in lines if line.strip()]
            
            # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –Ω—É–º–µ—Ä–∞—Ü–∏—é –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∏–µ —Å—Ç—Ä–æ–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—Ä–æ–Ω—É–º–µ—Ä–æ–≤–∞–Ω—ã
            cleaned_lines = []
            should_number = []
            
            for i, line in enumerate(lines):
                # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –Ω—É–º–µ—Ä–∞—Ü–∏—é (–µ—Å–ª–∏ –µ—Å—Ç—å)
                clean_line = re.sub(r'^\d+\.\s*', '', line)
                cleaned_lines.append(clean_line)
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –¥–æ–ª–∂–Ω–∞ –ª–∏ —Å—Ç—Ä–æ–∫–∞ –∏–º–µ—Ç—å –Ω–æ–º–µ—Ä
                # –°—Ç—Ä–æ–∫–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å –Ω–æ–º–µ—Ä, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –º–∞–ª–µ–Ω—å–∫–æ–π –±—É–∫–≤—ã –∏–ª–∏ —Å —Ç–∏—Ä–µ/–¥–µ—Ñ–∏—Å–∞
                # –∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–æ–π
                if i > 0 and (
                    (len(clean_line) > 0 and clean_line[0].islower()) or 
                    clean_line.startswith('-') or 
                    clean_line.startswith('‚Äì')
                ):
                    should_number.append(False)
                else:
                    should_number.append(True)
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ–≤—É—é –Ω—É–º–µ—Ä–∞—Ü–∏—é
            result_lines = []
            for i, (line, should_num) in enumerate(zip(cleaned_lines, should_number)):
                processed_lines.append((line, should_num))
            for i, (line, should_num) in enumerate(zip(cleaned_lines, should_number)):
                if should_num:
                    result_lines.append(f"{i+1}. {line}")
                else:
                    result_lines.append(line)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ
            self.current_reqs_text.delete(1.0, tk.END)
            self.current_reqs_text.insert(1.0, "\n".join(result_lines))
            
            self.set_status("–ê–≤—Ç–æ–Ω—É–º–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∞")
            
        except Exception as e:
            self.set_status(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –∞–≤—Ç–æ–Ω—É–º–µ—Ä–∞—Ü–∏–∏: {str(e)}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∞–≤—Ç–æ–Ω—É–º–µ—Ä–∞—Ü–∏—é: {str(e)}")
            
    def toggle_auto_numbering(self, is_enabled=None):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –∞–≤—Ç–æ–Ω—É–º–µ—Ä–∞—Ü–∏–∏"""
        try:
            # –ï—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
            if is_enabled is None:
                is_enabled = self.auto_numbering_var.get()
            else:
                # –ò–Ω–∞—á–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                self.auto_numbering_var.set(is_enabled)
                
            # –ï—Å–ª–∏ –∞–≤—Ç–æ–Ω—É–º–µ—Ä–∞—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞, –ø—Ä–∏–º–µ–Ω—è–µ–º –µ—ë –∫ —Ç–µ–∫—Å—Ç—É
            if is_enabled:
                # –ü—Ä–∏–º–µ–Ω—è–µ–º –∞–≤—Ç–æ–Ω—É–º–µ—Ä–∞—Ü–∏—é –∫ —Ç–µ–∫—Å—Ç—É
                self.apply_auto_numbering()
                
                # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞
                self.current_reqs_text.bind("<Return>", self.handle_return_with_numbering)
            else:
                # –ï—Å–ª–∏ –∞–≤—Ç–æ–Ω—É–º–µ—Ä–∞—Ü–∏—è –≤—ã–∫–ª—é—á–µ–Ω–∞, —É–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞
                self.current_reqs_text.unbind("<Return>")
                
        except Exception as e:
            self.set_status(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –∞–≤—Ç–æ–Ω—É–º–µ—Ä–∞—Ü–∏–∏: {str(e)}")
            print(f"Error toggling auto numbering: {str(e)}")
            
    def handle_return_with_numbering(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è Enter –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–Ω–æ–π –∞–≤—Ç–æ–Ω—É–º–µ—Ä–∞—Ü–∏–∏"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω–∞ –ª–∏ –∞–≤—Ç–æ–Ω—É–º–µ—Ä–∞—Ü–∏—è
            if not self.auto_numbering_var.get():
                return  # –ï—Å–ª–∏ –∞–≤—Ç–æ–Ω—É–º–µ—Ä–∞—Ü–∏—è –≤—ã–∫–ª—é—á–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É Enter
                
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞
            cursor_pos = self.current_reqs_text.index(tk.INSERT)
            line, col = map(int, cursor_pos.split('.'))
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–æ–∫—É
            current_line = self.current_reqs_text.get(f"{line}.0", f"{line}.end").strip()
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ —Ç–µ–∫—Å—Ç–∞ –¥–æ —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏
            all_text_before = self.current_reqs_text.get(1.0, f"{line}.0").strip()
            lines_before = all_text_before.split("\n") if all_text_before else []
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫ –¥–æ —Ç–µ–∫—É—â–µ–π
            numbered_lines_before = [l for l in lines_before if re.match(r'^\d+\.\s', l)]
            
            # –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
            self.current_reqs_text.insert(tk.INSERT, "\n")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–º–µ—Ä –∫ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ
            # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∞—è —Å—Ç—Ä–æ–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –Ω–æ–º–µ—Ä–∞, –¥–æ–±–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –Ω–æ–º–µ—Ä
            if re.match(r'^\d+\.\s', current_line):
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—É—â–∏–π –Ω–æ–º–µ—Ä
                current_num_match = re.match(r'^(\d+)\.', current_line)
                if current_num_match:
                    current_num = int(current_num_match.group(1))
                    next_number = current_num + 1
                else:
                    next_number = len(numbered_lines_before) + 1
                
                # –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –≤ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
                self.current_reqs_text.insert(f"{line+1}.0", f"{next_number}. ")
                
                # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∫—É—Ä—Å–æ—Ä –ø–æ—Å–ª–µ –Ω–æ–º–µ—Ä–∞
                self.current_reqs_text.mark_set(tk.INSERT, f"{line+1}.{len(str(next_number)) + 2}")
            
            # –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É Enter
            return "break"
            
        except Exception as e:
            self.set_status(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–≤–æ–¥–∞: {str(e)}")
            print(f"Error handling return with numbering: {str(e)}")
            
    def apply_auto_numbering(self):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –Ω—É–º–µ—Ä–∞—Ü–∏–∏ –∫ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
            text_content = self.current_reqs_text.get(1.0, tk.END).strip()
            
            if not text_content:
                return
                
            # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏
            lines = text_content.split("\n")
            
            # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
            lines = [line.strip() for line in lines if line.strip()]
            
            # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –Ω—É–º–µ—Ä–∞—Ü–∏—é –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∏–µ —Å—Ç—Ä–æ–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—Ä–æ–Ω—É–º–µ—Ä–æ–≤–∞–Ω—ã
            cleaned_lines = []
            should_number = []
            
            for i, line in enumerate(lines):
                # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –Ω—É–º–µ—Ä–∞—Ü–∏—é (–µ—Å–ª–∏ –µ—Å—Ç—å)
                clean_line = re.sub(r'^\d+\.\s*', '', line)
                cleaned_lines.append(clean_line)
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –¥–æ–ª–∂–Ω–∞ –ª–∏ —Å—Ç—Ä–æ–∫–∞ –∏–º–µ—Ç—å –Ω–æ–º–µ—Ä
                # –°—Ç—Ä–æ–∫–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å –Ω–æ–º–µ—Ä, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –º–∞–ª–µ–Ω—å–∫–æ–π –±—É–∫–≤—ã –∏–ª–∏ —Å —Ç–∏—Ä–µ/–¥–µ—Ñ–∏—Å–∞
                # –∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–æ–π
                if i > 0 and (
                    (len(clean_line) > 0 and clean_line[0].islower()) or 
                    clean_line.startswith('-') or 
                    clean_line.startswith('‚Äì')
                ):
                    should_number.append(False)
                else:
                    should_number.append(True)
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ–≤—É—é –Ω—É–º–µ—Ä–∞—Ü–∏—é
            result_lines = []
            number_counter = 1
            
            for i, (line, should_num) in enumerate(zip(cleaned_lines, should_number)):
                if should_num:
                    result_lines.append(f"{number_counter}. {line}")
                    number_counter += 1
                else:
                    result_lines.append(f"    {line}")  # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø –¥–ª—è –Ω–µ–Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ
            self.current_reqs_text.delete(1.0, tk.END)
            self.current_reqs_text.insert(1.0, "\n".join(result_lines))
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
            self.set_status("–ê–≤—Ç–æ–Ω—É–º–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∞")
            
        except Exception as e:
            self.set_status(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –∞–≤—Ç–æ–Ω—É–º–µ—Ä–∞—Ü–∏–∏: {str(e)}")
            print(f"Error applying auto numbering: {str(e)}")
            
    def remove_auto_numbering(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –Ω—É–º–µ—Ä–∞—Ü–∏–∏ –∏–∑ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
            text_content = self.current_reqs_text.get(1.0, tk.END).strip()
            
            if not text_content:
                return
                
            # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏
            lines = text_content.split("\n")
            
            # –£–¥–∞–ª—è–µ–º –Ω—É–º–µ—Ä–∞—Ü–∏—é
            result_lines = []
            for line in lines:
                # –£–¥–∞–ª—è–µ–º –Ω—É–º–µ—Ä–∞—Ü–∏—é –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏
                clean_line = re.sub(r'^\d+\.\s*', '', line)
                result_lines.append(clean_line)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ
            self.current_reqs_text.delete(1.0, tk.END)
            self.current_reqs_text.insert(1.0, "\n".join(result_lines))
            
        except Exception as e:
            self.set_status(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–≤—Ç–æ–Ω—É–º–µ—Ä–∞—Ü–∏–∏: {str(e)}")
            print(f"Error removing auto numbering: {str(e)}")
            
    def parse_tech_req(self, text_lines):
        """
        –ü–∞—Ä—Å–∏–Ω–≥ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∏–∑ –æ–±—ä–µ–∫—Ç–∞ TextLines –≤ —É–¥–æ–±–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        :param text_lines: –û–±—ä–µ–∫—Ç TextLines –∏–∑ KOMPAS API
        :return: –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π —Å —Å–æ–±–ª—é–¥–µ–Ω–∏–µ–º –Ω—É–º–µ—Ä–∞—Ü–∏–∏
        """
        # –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è –≤—ã–≤–æ–¥–∞
        formatted_text = ""
        
        # –°—á–µ—Ç—á–∏–∫ –¥–ª—è –Ω—É–º–µ—Ä–∞—Ü–∏–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
        count = 0
        
        # –¢–µ–∫—É—â–µ–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ –∏ –µ–≥–æ –Ω–æ–º–µ—Ä
        current_req = ""
        current_req_num = 0
        
        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
        i = 0
        while i < text_lines.Count:
            line = text_lines.TextLines[i]
            line_text = line.Str.strip()
            
            # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –ø—É—Å—Ç–∞—è, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π
            if not line_text:
                i += 1
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω—É–º–µ—Ä–∞—Ü–∏—è —É —Å—Ç—Ä–æ–∫–∏
            if line.Numbering == 1:
                # –ï—Å–ª–∏ —É–∂–µ —Å–æ–±—Ä–∞–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
                if current_req:
                    formatted_text += f"{current_req_num}. {current_req}\n"
                
                # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤–æ–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ
                count += 1
                current_req_num = count
                current_req = line_text
            else:
                # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∞—è —Å—Ç—Ä–æ–∫–∞ - –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–π
                if current_req:
                    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–±–µ–ª –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –Ω–∞—á–∞–ª–æ —Å—Ç—Ä–æ–∫–∏ –∏ 
                    # –ø—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–æ–∫–∞ –Ω–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ –∑–Ω–∞–∫ –ø–µ—Ä–µ–Ω–æ—Å–∞
                    if (not current_req.endswith(" ") and 
                        not current_req.endswith("-") and 
                        not line_text.startswith("-")):
                        current_req += " "
                    current_req += line_text
                else:
                    # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –±–µ–∑ –Ω—É–º–µ—Ä–∞—Ü–∏–∏, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ
                    count += 1
                    current_req_num = count
                    current_req = line_text
            
            # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–æ–∫–∞, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ
            if i == text_lines.Count - 1 and current_req:
                formatted_text += f"{current_req_num}. {current_req}\n"
            
            i += 1
            
        return formatted_text
        
    def clean_tech_req_line(self, line):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç—Ä–æ–∫–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –æ—Ç –Ω—É–º–µ—Ä–∞—Ü–∏–∏ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        # –£–¥–∞–ª—è–µ–º –Ω—É–º–µ—Ä–∞—Ü–∏—é –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "1. ", "2. ", –∏ —Ç.–¥.)
        line = re.sub(r'^\s*\d+\.\s*', '', line)
        
        # –£–¥–∞–ª—è–µ–º –¥—Ä—É–≥–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã —Å–ø–∏—Å–∫–∞
        line = re.sub(r'^\s*[‚Ä¢\-‚Äì‚Äî]\s*', '', line)
        
        # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏
        line = line.strip()
        
        return line
            
if __name__ == "__main__":
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è COM
    pythoncom.CoInitialize()
    
    try:
        # –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        root = tk.Tk()
        app = KompasApp(root)
        root.mainloop()
    except Exception as e:
        messagebox.showerror("–û—à–∏–±–∫–∞", f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {str(e)}")
    finally:
        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ COM
        pythoncom.CoUninitialize()
